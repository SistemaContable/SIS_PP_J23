/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Facturacion;


import Clases_Auxiliares.Conexion;
import Clases_Auxiliares.Validaciones;
import Clases_Auxiliares.Fechas;
import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenuItem;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manolo
 */
public class IGUI_Asignar_Pto_Venta_Comprobante extends javax.swing.JInternalFrame {

    //variables de referencias a librerias Auxiliares
    private Conexion r_con = new Conexion(); 
    private final Validaciones validar = new Validaciones();
    private final Fechas fecha = new Fechas ();
    
    
    //nombre de la Tabla del SGBD
    private String name_tabla = "ptoventa_x_tipocomprobante";
    //nombre de las columnas de la Tabla a mostrar en la Ayuda
    //private String[] colum_names = {"vxc_id_pto_venta","vxc_id_tipo_comprobante","vxc_numero"};
    //nombres reales de los Indices de la Tabla
    private String[] indices_tabla = {"IX_tc_descripcion","IX_vxc_tipo_comprobante"};  
    
    
    //nombres de los campos de la JTabla (formales a mostrar en la ayuda) 
    private String[] colum_names_tabla = {"Punto Venta","Codigo Comprobante","Tipo Comprobante","Numero"};    
    
   
    //nombres formales de los Indices de la Tabla (a mostrar en el menu ordenamiento)
    private String[] name_indicesTabla = {"por Descripcion de Comprobante","por Tipo de Comprobante"};
    //posicion que ocupa el valor indicesTabla en el colum_names_tabla (para saber que buscar)
    private int[] relacion_indices_conTabla = {0,1};
    
    //modo ordenamiento elegido inicial por defecto (cambiar manualmente)
    private int numero_ordenamiento_elegido = 0; //(corresponde al numero de indicesTabla)
    private String modo_ordenamiento_elegido = indices_tabla[numero_ordenamiento_elegido];
    
    //fila actual posicionado en la tabla
    private int fila_ultimo_registro;    
    
    
    public IGUI_Asignar_Pto_Venta_Comprobante(Conexion r) {
        initComponents();
        restringirCampos();
        r_con = r; 
        
        cargarComboTipoIVA();
        combo_pto_venta.setSelectedIndex(0);
        modoConsulta();
        cargarOrdenamientos ();
        detectarOrden ();
        ocultar_Msj();
        
        //**selecciono el primer registro y cargo los campos
        if (tabla.getRowCount()>0){
            tabla.setRowSelectionInterval(0,0); 
            cargar_ValoresPorFila(0);
        }
//        cargarComboTipoIVA();
        cargarListaComprobantes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_ayuda = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        panel_datos = new javax.swing.JPanel();
        combo_pto_venta = new javax.swing.JComboBox();
        btn_aceptar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        lab_tit_orden = new javax.swing.JLabel();
        lab_orden = new javax.swing.JLabel();
        lab_tit_modo = new javax.swing.JLabel();
        lab_modo = new javax.swing.JLabel();
        lab_mensaje = new javax.swing.JLabel();
        lab_tipo = new javax.swing.JLabel();
        lab_tipo_pto_venta = new javax.swing.JLabel();
        lab_tipo1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaComprobantes = new javax.swing.JList();
        menu_interno = new javax.swing.JMenuBar();
        menu_alta = new javax.swing.JMenu();
        menu_baja = new javax.swing.JMenu();
        menu_recorrido = new javax.swing.JMenu();
        menu_salir = new javax.swing.JMenu();

        setMaximizable(true);
        setTitle("Gesti√≥n Asignar Punto Venta-Comprobantes");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cuentas.png"))); // NOI18N

        panel_ayuda.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout panel_ayudaLayout = new javax.swing.GroupLayout(panel_ayuda);
        panel_ayuda.setLayout(panel_ayudaLayout);
        panel_ayudaLayout.setHorizontalGroup(
            panel_ayudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_ayudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        panel_ayudaLayout.setVerticalGroup(
            panel_ayudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_ayudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addContainerGap())
        );

        panel_datos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_datos.setFocusCycleRoot(true);

        combo_pto_venta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        combo_pto_venta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_pto_ventaItemStateChanged(evt);
            }
        });

        btn_aceptar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_aceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/aceptar.png"))); // NOI18N
        btn_aceptar.setText("ACEPTAR");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        btn_cancelar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cancelar.png"))); // NOI18N
        btn_cancelar.setText("CANCELAR");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        lab_tit_orden.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_tit_orden.setForeground(new java.awt.Color(51, 153, 0));
        lab_tit_orden.setText("ORDEN:");

        lab_orden.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_orden.setText("Tipo");

        lab_tit_modo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_tit_modo.setForeground(new java.awt.Color(204, 0, 0));
        lab_tit_modo.setText("MODO:");

        lab_modo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_modo.setText("Tipo");

        lab_mensaje.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_mensaje.setForeground(java.awt.Color.red);
        lab_mensaje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab_mensaje.setText("mensaje");

        lab_tipo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_tipo.setText("Punto Venta:");

        lab_tipo_pto_venta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_tipo_pto_venta.setForeground(new java.awt.Color(51, 51, 51));
        lab_tipo_pto_venta.setText("Tipo");

        lab_tipo1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_tipo1.setText("Seleccione los tipos de comprobantes para el Punto de Venta:");

        jCheckBox1.setText("Seleccionar todos los Tipos de Comprobantes");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });

        listaComprobantes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listaComprobantes);

        javax.swing.GroupLayout panel_datosLayout = new javax.swing.GroupLayout(panel_datos);
        panel_datos.setLayout(panel_datosLayout);
        panel_datosLayout.setHorizontalGroup(
            panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lab_mensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_datosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lab_tit_orden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lab_orden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lab_tit_modo)
                .addGap(18, 18, 18)
                .addComponent(lab_modo, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(panel_datosLayout.createSequentialGroup()
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_datosLayout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(btn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(btn_cancelar))
                    .addGroup(panel_datosLayout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lab_tipo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panel_datosLayout.createSequentialGroup()
                                .addComponent(lab_tipo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo_pto_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lab_tipo_pto_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panel_datosLayout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addComponent(jCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_datosLayout.setVerticalGroup(
            panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_datosLayout.createSequentialGroup()
                        .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lab_tit_orden)
                            .addComponent(lab_orden)
                            .addComponent(lab_tit_modo)
                            .addComponent(lab_modo))
                        .addGap(62, 62, 62))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_datosLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combo_pto_venta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lab_tipo)
                            .addComponent(lab_tipo_pto_venta))
                        .addGap(18, 18, 18)
                        .addComponent(lab_tipo1)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lab_mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        menu_interno.setBorderPainted(false);

        menu_alta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/check-4x.png"))); // NOI18N
        menu_alta.setText("ALTA");
        menu_alta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_altaMouseClicked(evt);
            }
        });
        menu_interno.add(menu_alta);

        menu_baja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/baja.png"))); // NOI18N
        menu_baja.setText("BAJA");
        menu_baja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_bajaMouseClicked(evt);
            }
        });
        menu_interno.add(menu_baja);

        menu_recorrido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/magnifying-glass-4x.png"))); // NOI18N
        menu_recorrido.setText(" ORDEN RECORRIDO ");
        menu_interno.add(menu_recorrido);

        menu_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/circle-x-4x.png"))); // NOI18N
        menu_salir.setText("SALIR           ");
        menu_salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_salirMouseClicked(evt);
            }
        });
        menu_interno.add(menu_salir);

        setJMenuBar(menu_interno);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_ayuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_datos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel_datos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panel_ayuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        cargar_ValoresPorFila(tabla.rowAtPoint(evt.getPoint()));
        scrollCellToView(this.tabla,tabla.getSelectedRow(),1);        
    }//GEN-LAST:event_tablaMouseClicked
    
    private void menu_altaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_altaMouseClicked
        menuDisponible(false);
        lab_modo.setText("Alta");
        vaciarCampos();        
        //ayudaDisponible(false);
        
        
        btn_aceptar.setEnabled(true);
        btn_cancelar.setEnabled(true);
        jCheckBox1.setEnabled(true);
        listaComprobantes.setEnabled(true);
        combo_pto_venta.setEnabled(true);
        
        combo_pto_venta.setEnabled(false);
    }//GEN-LAST:event_menu_altaMouseClicked

    private void menu_bajaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_bajaMouseClicked
        menuDisponible(false);
        lab_modo.setText("Baja");
        camposEditables(false);
        ayudaDisponible(false);
        btn_aceptar.setEnabled(true);
        btn_cancelar.setEnabled(true);
        listaComprobantes.setEnabled(true);
        jCheckBox1.setEnabled(true);
        cargarListaBorrar();
        mostrar_Msj_Error("¬øEst√° seguro que desea Eliminar?");
        combo_pto_venta.setEnabled(false);
        btn_aceptar.requestFocus();
    }//GEN-LAST:event_menu_bajaMouseClicked

    private void menu_salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_salirMouseClicked
        this.dispose();
    }//GEN-LAST:event_menu_salirMouseClicked

    public int buscarValor (String valor){
        if (tabla.getRowCount()>0){
            return busquedaBinaria(valor.toUpperCase(),0,tabla.getRowCount()-1,relacion_indices_conTabla[numero_ordenamiento_elegido]); 
        }
        else{
            return -1;
        }
    } 

    private int busquedaBinaria(String elemento, int ini, int fin, int nro_campo_tabla){
        int posicion;
        int M = (int)(ini+fin)/2;

        //CB1
        if (elemento.equals((tabla.getValueAt(M,nro_campo_tabla).toString()).toUpperCase())){
                posicion = M;
            }              
        else{
            //CB2
                if (ini >= fin){
                    posicion = -1;
                }  
            //CG
            else{
                if (compare(((tabla.getValueAt(M,nro_campo_tabla)).toString().toUpperCase()),elemento) < 0){
                    ini = M+1;
                    posicion = busquedaBinaria (elemento,ini,fin,nro_campo_tabla);
                }
                else{
                    fin = M-1;
                    posicion = busquedaBinaria (elemento,ini,fin,nro_campo_tabla);
                }            
            }
        }
        return(posicion);
    }
    
//*******************************************************************************************************
//Este algoritmo reemplaza al compareTo de Java, ya que mejora problemas como por ejemplo comparar
// cadenas y numeros, dado que 2.compareTo(10) devolvia 1, siendo que no es asi.
    private final boolean isDigit(char ch)
    {
        return ch >= 48 && ch <= 57;
    }

    /** Length of string is passed in for improved efficiency (only need to calculate it once) **/
    private final String getChunk(String s, int slength, int marker)
    {
        StringBuilder chunk = new StringBuilder();
        char c = s.charAt(marker);
        chunk.append(c);
        marker++;
        if (isDigit(c))
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (!isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        } else
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        }
        return chunk.toString();
    }

    public int compare(String o1, String o2)
    {
        String s1 = (String)o1;
        String s2 = (String)o2;

        int thisMarker = 0;
        int thatMarker = 0;
        int s1Length = s1.length();
        int s2Length = s2.length();

        while (thisMarker < s1Length && thatMarker < s2Length)
        {
            String thisChunk = getChunk(s1, s1Length, thisMarker);
            thisMarker += thisChunk.length();

            String thatChunk = getChunk(s2, s2Length, thatMarker);
            thatMarker += thatChunk.length();

            // If both chunks contain numeric characters, sort them numerically
            int result = 0;
            if (isDigit(thisChunk.charAt(0)) && isDigit(thatChunk.charAt(0)))
            {
                // Simple chunk comparison by length.
                int thisChunkLength = thisChunk.length();
                result = thisChunkLength - thatChunk.length();
                // If equal, the first different number counts
                if (result == 0)
                {
                    for (int i = 0; i < thisChunkLength; i++)
                    {
                        result = thisChunk.charAt(i) - thatChunk.charAt(i);
                        if (result != 0)
                        {
                            return result;
                        }
                    }
                }
            } else
            {
                result = thisChunk.compareTo(thatChunk);
            }

            if (result != 0)
                return result;
        }
        return s1Length - s2Length;
    }
//*******************************************************************************************************
        
    
    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        ocultar_Msj();
        menuDisponible(true); 
        modoConsulta();        
        listaComprobantes.clearSelection();
        cargarListaComprobantes();
        /*if (field_tasa.getText().equals("")){
            cargar_ValoresPorFila(this.fila_ultimo_registro);
        }
        else{
            posicionarAyuda(field_tasa.getText());
        }*/
        
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
       if (lab_modo.getText().equals("Alta")){
            if (camposCompletos()){
                ocultar_Msj();
                insertar();               
                menuDisponible(true); 
                modoConsulta();           
                updateTabla();               
            }
            else{
                mostrar_Msj_Error("Por favor, complete todos los campos solicitados");
            }
        }
        else{
            if (lab_modo.getText().equals("Baja")){
                if (!lab_tipo_pto_venta.getText().equals("")){                                        
                    ocultar_Msj();
                    eliminar();                    
                    menuDisponible(true); 
                    modoConsulta();
                    vaciarCampos();
                    updateTabla();                    
                }
                else
                {
                mostrar_Msj_Error("Por favor, seleccione un Punto de Venta");
                }
            }
        }                                    
       cargarListaComprobantes();
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void combo_pto_ventaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_pto_ventaItemStateChanged
        try {
            r_con.Connection();            
            ResultSet res = r_con.Consultar("SELECT * FROM punto_venta"+
                                           " WITH (INDEX(PK_pv_codigo)) "+
                                           " WHERE pv_codigo = "+combo_pto_venta.getSelectedItem()); 
                                              
            while(res.next()){
               lab_tipo_pto_venta.setText(res.getString(2).toUpperCase());
            }            
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Asignar_Pto_Venta_Comprobante.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        }       
        
        updateTabla();
    }//GEN-LAST:event_combo_pto_ventaItemStateChanged

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        listaComprobantes.clearSelection();                
        listaComprobantes.setSelectedIndex(0);
        if(jCheckBox1.isSelected())
            listaComprobantes.setSelectionInterval(0,listaComprobantes.getModel().getSize());
        
    }//GEN-LAST:event_jCheckBox1MouseClicked
    
    private void cargarOrdenamientos () {         
        ButtonGroup grupo_recorridos;
        grupo_recorridos = new javax.swing.ButtonGroup();
        for (int i = 0; i < indices_tabla.length; i++) {            
            JCheckBoxMenuItem item = new javax.swing.JCheckBoxMenuItem(name_indicesTabla[i],new javax.swing.ImageIcon(getClass().getResource("/Iconos/item.png")));
            item.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    detectarOrden ();
                }
            });
            grupo_recorridos.add(item);
            menu_recorrido.add(item);
            if (i==numero_ordenamiento_elegido){
                item.setSelected(true);
            }
        } 
    }
    
    /**
     * el metodo detecta que orden fue seleccionado entre los valores de "orden de recorrido"
     */
    private void detectarOrden (){        
        int i = 0;
        boolean detecte = false;
        
        while ((!detecte)&&(i < this.menu_recorrido.getItemCount())) {            
            if(this.menu_recorrido.getItem(i).isSelected()){
                JMenuItem item = menu_recorrido.getItem(i);
                numero_ordenamiento_elegido = i;
                modo_ordenamiento_elegido = item.getText();
                lab_orden.setText(menu_recorrido.getItem(i).getText());
            }
            i++;
        }
        //** cambiado el orden, actualizo los valores de la tabla respecto al orden
        updateTabla();
    }    
    
    /**
     * metodo que vuelca los valores al panel de datos
     * @param valor indica una numero de registro
     */
    private void cargar_Campos (int valor){
        try{    
            this.vaciarCampos();
            r_con.Connection();
            PreparedStatement pstm = r_con.getConn().prepareStatement(
                        " SELECT *"+
                        " FROM "+name_tabla+
                        " WHERE vxc_id_pto_venta = "+valor);

            ResultSet res = pstm.executeQuery();
                
            while(res.next()){                
                combo_pto_venta.setSelectedItem(res.getString(2));                                                                
            }
            res.close();
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }           
    }   
    
    /**
     * metodo que vuelca los valores de la tabla de ayuda a los registros del panel de datos
     * @param fila indica una fila valida dentro de la tabla, gestiona la posicion fila_registro
     */
    private void cargar_ValoresPorFila (int fila){
    /*    if ((fila >= 0)&&(fila < tabla.getRowCount())){
            fila_ultimo_registro=fila;
            String codigo = String.valueOf(tabla.getValueAt(fila, 0));
            cargar_Campos(Integer.parseInt(codigo));
        }
        */
    }
    
    /**
     * realiza una consulta a la tabla Cuentas de la BD y la vuelca a la jTable
     */
    private void updateTabla(){ 
                      
        //** pido los datos a la tabla  
        Object[][] vcta = this.getDatos();
               
        //** se colocan los datos en la tabla
        DefaultTableModel datos = new DefaultTableModel();                        
        tabla.setModel(datos);         
        datos = new DefaultTableModel(vcta,colum_names_tabla);                        
        tabla.setModel(datos); 
        
        //ajustamos tama√±o de la celda Fecha Alta
        /*TableColumn columna = tabla.getColumn("Fecha Alta");        
        columna.setPreferredWidth(100);
        columna.setMinWidth(100);
        columna.setMaxWidth(100);*/
        
        if (!lab_tipo_pto_venta.getText().equals("")){
            //posicionarAyuda(lab_tipo_pto_venta.getText());
        }
        else{
            if ((fila_ultimo_registro-1 >= 0)&&(fila_ultimo_registro-1 < tabla.getRowCount())){             
                tabla.setRowSelectionInterval(fila_ultimo_registro-1,fila_ultimo_registro-1);
                scrollCellToView(this.tabla,fila_ultimo_registro-1,fila_ultimo_registro-1); 
                cargar_ValoresPorFila(fila_ultimo_registro-1);  
            }
            else{
                 if ((fila_ultimo_registro+1 >= 0)&&(fila_ultimo_registro+1 <= tabla.getRowCount())){                      
                    tabla.setRowSelectionInterval(fila_ultimo_registro,fila_ultimo_registro); 
                    scrollCellToView(this.tabla,fila_ultimo_registro,fila_ultimo_registro);
                    cargar_ValoresPorFila(fila_ultimo_registro);   
                }
            }
        }
    }
    
    /**
     * posiciona la ayuda, cargando los datos de la cuenta al panel de datos y centrando la tabla
     * al valor selecionado 
     * @param valor numero de la registro seleccionado
     */
    private void posicionarAyuda(String valor) {
        int posicion = buscarValor(valor);      
        if (posicion>=0){
            cargar_ValoresPorFila(posicion);
            ocultar_Msj();
            scrollCellToView(this.tabla,posicion,1);
            tabla.setRowSelectionInterval(posicion,posicion);
        }
    }
    
    /**
     * metodo que maneja el modelo de una jTable para centrar el scroll al medio
     * @param table la jTable a centrar
     * @param rowIndex numero de la fila a centrar al medio
     * @param vColIndex valor por defecto = 1, es para obtener el Rectangle de la jTable
     */
    private static void scrollToCenter(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
          return;
        }
        JViewport viewport = (JViewport) table.getParent();
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);
        Rectangle viewRect = viewport.getViewRect();
        rect.setLocation(rect.x - viewRect.x, rect.y - viewRect.y);

        int centerX = (viewRect.width - rect.width); // / 2;
        int centerY = (viewRect.height - rect.height); // / 2;
        if (rect.x < centerX) {
          centerX = -centerX;
        }
        if (rect.y < centerY) {
          centerY = -centerY;
        }
        rect.translate(centerX, centerY);
        viewport.scrollRectToVisible(rect);
    }
    
    /**
     * metodo que maneja el modelo de una jTable para que sea visible al usuario
     * @param table la jTable a hacer visivle
     * @param rowIndex numero de la fila actual
     * @param vColIndex valor por defecto = 1, es para obtener el Rectangle de la jTable
     */
    public void scrollCellToView(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
            return;
        }
        JViewport viewport = (JViewport) table.getParent();
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);
        Rectangle viewRect = viewport.getViewRect();

        int x = viewRect.x;
        int y = viewRect.y;

        if (rect.x >= viewRect.x && rect.x <= (viewRect.x + viewRect.width - rect.width)){

        } else if (rect.x < viewRect.x){
            x = rect.x;
        } else if (rect.x > (viewRect.x + viewRect.width - rect.width)) {
            x = rect.x - viewRect.width + rect.width;
        }

        if (rect.y >= viewRect.y && rect.y <= (viewRect.y + viewRect.height - rect.height)){

        } else if (rect.y < viewRect.y){
            y = rect.y;
        } else if (rect.y > (viewRect.y + viewRect.height - rect.height)){
            y = rect.y - viewRect.height + rect.height;
        }

        viewport.setViewPosition(new Point(x,y));
    }
    
    /**
     * devuelve la cantidad actual de cuentas en la Base de Datos
     * @return valor entero de la cantidad de cuentas
     */
    private int getCantidad_Cuentas (){
        int registros = 0;
        //obtenemos la cantidad de registros existentes en la tabla
        try{         
           r_con.Connection();           
           PreparedStatement pstm = r_con.getConn().prepareStatement("SELECT count(1) as total FROM "+name_tabla);
           ResultSet res = pstm.executeQuery();
           res.next();
           registros = res.getInt("total");
           res.close();
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }
        
        return registros;
    }
    
    /**
     * obtiene todos los datos de la tabla y los carga a una matriz de objetos
     * @return retorna una matriz de objetos, cuya finalidad es setearla directamente
     *         al modelo de la jTable
     */
    public Object [][] getDatos(){                 
        Object[][] data = new String[getCantidad_Cuentas ()][4];  
        //realizamos la consulta sql y llenamos los datos en "Object"
        try{    
            if (4>=0){
                r_con.Connection();
                
                String puntoVenta=lab_tipo_pto_venta.getText();
                
                String consulta = ("select pv_descripcion,tc_codigo,tc_descripcion,vxc_numero "
                        + "         from punto_venta,tipo_comprobante,ptoventa_x_tipocomprobante "
                        + "         where pv_codigo=vxc_id_pto_venta and tc_codigo=vxc_id_tipo_comprobante and pv_descripcion='"+puntoVenta+"'");

                PreparedStatement pstm = r_con.getConn().prepareStatement(consulta);

                ResultSet res = pstm.executeQuery();
                int i = 0;
                while(res.next()){
                    for (int j = 0; j < 4; j++) {                          
                        data[i][j] = res.getString(j+1);                        
                    }     
                    i++;
                }
                res.close();
            }
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }
        return data;
    }
    
    /*
    * consulta utilizada para saber si existe un registro en el Sistema 
    */
    private boolean existe (int nro){
        boolean existe = false;
        try {
            r_con.Connection();
            PreparedStatement pstm = r_con.getConn().prepareStatement(
                    "SELECT * "+
                    " FROM "+name_tabla+
                    " WHERE vxc_id_pto_venta = "+nro);
            
            ResultSet res = pstm.executeQuery();
            
            while(res.next()){
                existe = true;
            }
            res.close();
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Asignar_Pto_Venta_Comprobante.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        }
        return existe;
    }
    
    private void insertar(){             
        r_con.Connection();   
        int puntoVenta=Integer.parseInt((String)combo_pto_venta.getSelectedItem());        
        for(int i:listaComprobantes.getSelectedIndices()){
            if(i<listaComprobantes.getModel().getSize()){
                String aux=(String)listaComprobantes.getModel().getElementAt(i);
                String[] numComprobante=aux.split("-");                        
                String sql = "INSERT INTO "+name_tabla
                           + " VALUES("+puntoVenta+","+numComprobante[0]+",0)";                        
                r_con.InsertarSinCartel(sql);                
            }
        }
    }
    
    private void eliminar(){
        try{
        if (!lab_tipo_pto_venta.getText().equals("")){
            int puntoVenta=Integer.parseInt((String)combo_pto_venta.getSelectedItem());        
            r_con.Connection();
            for(int i:listaComprobantes.getSelectedIndices()){
                String cadena=(String)listaComprobantes.getModel().getElementAt(i);
                String [] separada; 
                separada = cadena.split("-");                                              
                int codigo_comprobante=Integer.parseInt(separada[0].trim());                 
                r_con.ActualizarSinCartel("DELETE FROM "+name_tabla+" WHERE vxc_id_tipo_comprobante="+codigo_comprobante+" and vxc_id_pto_venta = "+puntoVenta);        
            }            
            r_con.cierraConexion();
        }
        }catch(java.lang.ArrayIndexOutOfBoundsException e){}
    }
    
    
    
    private void modoConsulta (){
        lab_modo.setText("Consulta");  
        combo_pto_venta.setEnabled(true);
        listaComprobantes.setEnabled(false);
        btn_aceptar.setEnabled(false);
        btn_cancelar.setEnabled(false);
        jCheckBox1.setEnabled(false);
        camposEditables(false); 
        ayudaDisponible(true);
    }
    
    
    private void camposEditables (boolean condicion){
        combo_pto_venta.setEditable(condicion);

    }
    
    private void ayudaDisponible(boolean condicion){

        
        
        
        tabla.setVisible(condicion);
    }
    
    private void vaciarCampos(){
        
    }
    
    private boolean camposCompletos (){
        if((combo_pto_venta.getSelectedIndex()>=0))         
          {
            return true;
        }
        else{
            return false;
        }
    }
    
    private void menuDisponible (boolean disponible){
        menu_alta.setEnabled(disponible);
        menu_baja.setEnabled(disponible);        
        menu_recorrido.setEnabled(disponible);
        menu_salir.setEnabled(disponible);

    }
    
    private void ocultar_Msj(){
        this.lab_mensaje.setText(" ");
    }
    
    private void mostrar_Msj_Exito(String texto) {
        this.lab_mensaje.setText(texto);
        this.lab_mensaje.setForeground(new java.awt.Color(0, 153, 51));
    }
    
    private void mostrar_Msj_Error(String texto) {
        this.lab_mensaje.setText(texto);
        this.lab_mensaje.setForeground(Color.RED);
    }   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JComboBox combo_pto_venta;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lab_mensaje;
    private javax.swing.JLabel lab_modo;
    private javax.swing.JLabel lab_orden;
    private javax.swing.JLabel lab_tipo;
    private javax.swing.JLabel lab_tipo1;
    private javax.swing.JLabel lab_tipo_pto_venta;
    private javax.swing.JLabel lab_tit_modo;
    private javax.swing.JLabel lab_tit_orden;
    private javax.swing.JList listaComprobantes;
    private javax.swing.JMenu menu_alta;
    private javax.swing.JMenu menu_baja;
    private javax.swing.JMenuBar menu_interno;
    private javax.swing.JMenu menu_recorrido;
    private javax.swing.JMenu menu_salir;
    private javax.swing.JPanel panel_ayuda;
    private javax.swing.JPanel panel_datos;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private void restringirCampos() {        
        //field_tasa.setNextFocusableComponent(field_sobretasa);
        //field_sobretasa.setNextFocusableComponent(field_sigla);
        //field_sigla.setNextFocusableComponent(btn_aceptar);
    }
    
    /*
    * metodo para controlar que el evento Key Typed sea solo numero
    */
    public void onlyNum(KeyEvent ke) {         
        char caracter = ke.getKeyChar();
        if(((caracter < '0') || (caracter > '9'))){
            ke.consume(); 
        } 
    } 
    
    private void cargarComboTipoIVA(){
        try {
            combo_pto_venta.removeAllItems();
            r_con.Connection();            
            ResultSet res = r_con.Consultar("SELECT * FROM punto_venta WITH (INDEX(PK_pv_codigo)) ");            

            while(res.next()){
               combo_pto_venta.addItem(res.getString(1)); 
            }
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Asignar_Pto_Venta_Comprobante.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        } 
    }
    
    public void cargarListaBorrar(){
        try{                                        
            r_con.Connection();
            String puntoVenta=combo_pto_venta.getSelectedItem().toString();            
            ResultSet rs=r_con.Consultar("select tc_codigo,tc_descripcion,vxc_numero "
                        + "         from punto_venta,tipo_comprobante,ptoventa_x_tipocomprobante "
                        + "         where pv_codigo=vxc_id_pto_venta and tc_codigo=vxc_id_tipo_comprobante and pv_codigo="+puntoVenta);
            DefaultListModel modelo = new DefaultListModel();
            while(rs.next()){       
                String cadena=rs.getString(1)+" - "+rs.getString(2);
                cadena=validar.soloPrimerMayus(cadena);
                modelo.addElement(cadena);        
            }
            listaComprobantes.setModel(modelo);
            
            
            // ##################### Multiple seleccion ####################
            // me permite seleccionar varios elementos dentro de la lista
            
            listaComprobantes.setSelectionModel(new DefaultListSelectionModel() {
            private int i0 = -1;
            private int i1 = -1;
            public void setSelectionInterval(int index0, int index1) {
                if(i0 == index0 && i1 == index1){
                    if(getValueIsAdjusting()){
                         setValueIsAdjusting(false);
                         setSelection(index0, index1);
                    }
                }else{
                    i0 = index0;
                    i1 = index1;
                    setValueIsAdjusting(false);
                    setSelection(index0, index1);
                }
            }
            private void setSelection(int index0, int index1){
                if(super.isSelectedIndex(index0)) {
                    super.removeSelectionInterval(index0, index1);
                }else {
                    super.addSelectionInterval(index0, index1);
                }
            }
        });
            
   //    ############################################################
            
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Asignar_Pto_Venta_Comprobante.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        }
    }
    
    
    
    public void cargarListaComprobantes(){
        try{                                        
            r_con.Connection();
            ResultSet rs=r_con.Consultar("select * from tipo_comprobante");
            DefaultListModel modelo = new DefaultListModel();
            while(rs.next()){       
                String cadena=rs.getString(1)+" - "+rs.getString(2);
                cadena=validar.soloPrimerMayus(cadena);
                modelo.addElement(cadena);        
            }
            listaComprobantes.setModel(modelo);
            
            
            // ##################### Multiple seleccion ####################
            // me permite seleccionar varios elementos dentro de la lista
            
            listaComprobantes.setSelectionModel(new DefaultListSelectionModel() {
            private int i0 = -1;
            private int i1 = -1;
            public void setSelectionInterval(int index0, int index1) {
                if(i0 == index0 && i1 == index1){
                    if(getValueIsAdjusting()){
                         setValueIsAdjusting(false);
                         setSelection(index0, index1);
                    }
                }else{
                    i0 = index0;
                    i1 = index1;
                    setValueIsAdjusting(false);
                    setSelection(index0, index1);
                }
            }
            private void setSelection(int index0, int index1){
                if(super.isSelectedIndex(index0)) {
                    super.removeSelectionInterval(index0, index1);
                }else {
                    super.addSelectionInterval(index0, index1);
                }
            }
        });
            
   //    ############################################################
            
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Asignar_Pto_Venta_Comprobante.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        }
    }
    
}

    
