/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Facturacion;


import Clases_Auxiliares.Conexion;
import Clases_Auxiliares.Validaciones;
import Clases_Auxiliares.Fechas;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenuItem;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manolo
 */
public class IGUI_Clientes extends javax.swing.JInternalFrame {

    //variables de referencias a librerias Auxiliares
    private Conexion r_con = new Conexion(); 
    private final Validaciones validar = new Validaciones();
    private final Fechas fecha = new Fechas ();
    
    //nombre de la Tabla del SGBD
    private String name_tabla = "clientes";
    //nombre de las columnas de la Tabla a mostrar en la Ayuda
    private String[] colum_names = {"cli_codigo","cli_nombre","cli_apellido","cli_fecha_nac","cli_cuit","cli_localidad","cli_direccion","cli_calle","cli_sit_frente_iva"};
    //nombres reales de los Indices de la Tabla
    private String[] indices_tabla = {"IX_Clientes_id","IX_Clientes_nom","IX_Clientes_ape"};  
    
    
    //nombres de los campos de la JTabla (formales a mostrar en la ayuda) 
    private String[] colum_names_tabla = {"Codigo","Nombre","Apellido","Fecha Nacimiento","CUIT","Localidad","Direccion","Calle","Sit. Frente Iva"};    
    
   
    //nombres formales de los Indices de la Tabla (a mostrar en el menu ordenamiento)
    private String[] name_indicesTabla = {"por Codigo de Cliente","por Nombre","por Apellido"};
    //posicion que ocupa el valor indicesTabla en el colum_names_tabla (para saber que buscar)
    private int[] relacion_indices_conTabla = {0,1,2};
    
    //modo ordenamiento elegido inicial por defecto (cambiar manualmente)
    private int numero_ordenamiento_elegido = 0; //(corresponde al numero de indicesTabla)
    private String modo_ordenamiento_elegido = indices_tabla[numero_ordenamiento_elegido];
    
    //fila actual posicionado en la tabla
    private int fila_ultimo_registro;    
    
    
    public IGUI_Clientes(Conexion r) {
        initComponents();
        ordenarFoco();
        r_con = r; 
        
        modoConsulta();
        cargarOrdenamientos ();
        detectarOrden ();
        ocultar_Msj();
        
        //**selecciono el primer registro y cargo los campos
        if (tabla.getRowCount()>0){
            tabla.setRowSelectionInterval(0,0); 
            cargar_ValoresPorFila(0);
        }
    }
    
    public IGUI_Clientes(){}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_ayuda = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        panel_datos = new javax.swing.JPanel();
        field_codigo = new javax.swing.JTextField();
        field_nombre = new javax.swing.JTextField();
        field_apellido = new javax.swing.JTextField();
        field_fecha_nac = new javax.swing.JFormattedTextField();
        field_cuit1 = new javax.swing.JTextField();
        field_cuit2 = new javax.swing.JTextField();
        field_cuit3 = new javax.swing.JTextField();
        field_localidad = new javax.swing.JTextField();
        field_direccion = new javax.swing.JTextField();
        field_calle = new javax.swing.JTextField();
        field_sit_frente_iva = new javax.swing.JTextField();
        btn_aceptar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        lab_tit_orden = new javax.swing.JLabel();
        lab_orden = new javax.swing.JLabel();
        lab_tit_modo = new javax.swing.JLabel();
        lab_modo = new javax.swing.JLabel();
        lab_mensaje = new javax.swing.JLabel();
        lab_codigo = new javax.swing.JLabel();
        lab_descripcion = new javax.swing.JLabel();
        lab_cantidad = new javax.swing.JLabel();
        lab_cu = new javax.swing.JLabel();
        lab_neto = new javax.swing.JLabel();
        lab_tasa = new javax.swing.JLabel();
        lab_tipo_imp = new javax.swing.JLabel();
        lab_cantidad1 = new javax.swing.JLabel();
        lab_cantidad2 = new javax.swing.JLabel();
        lab_neto1 = new javax.swing.JLabel();
        lab_localidad = new javax.swing.JLabel();
        panel_desplazamiento = new javax.swing.JPanel();
        btn_primero = new javax.swing.JButton();
        btn_anterior = new javax.swing.JButton();
        btn_proximo = new javax.swing.JButton();
        btn_ultimo = new javax.swing.JButton();
        field_buscar = new javax.swing.JTextField();
        btn_buscar = new javax.swing.JButton();
        lab_buscar = new javax.swing.JLabel();
        menu_interno = new javax.swing.JMenuBar();
        menu_alta = new javax.swing.JMenu();
        menu_baja = new javax.swing.JMenu();
        menu_mod = new javax.swing.JMenu();
        menu_recorrido = new javax.swing.JMenu();
        menu_listar = new javax.swing.JMenu();
        menu_salir = new javax.swing.JMenu();

        setMaximizable(true);
        setTitle("Gesti√≥n Clientes");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cuentas.png"))); // NOI18N

        panel_ayuda.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout panel_ayudaLayout = new javax.swing.GroupLayout(panel_ayuda);
        panel_ayuda.setLayout(panel_ayudaLayout);
        panel_ayudaLayout.setHorizontalGroup(
            panel_ayudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_ayudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panel_ayudaLayout.setVerticalGroup(
            panel_ayudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_ayudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addContainerGap())
        );

        panel_datos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_datos.setFocusCycleRoot(true);

        field_codigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_codigoFocusLost(evt);
            }
        });
        field_codigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                field_codigoKeyTyped(evt);
            }
        });

        try {
            field_fecha_nac.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        field_fecha_nac.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_fecha_nacFocusLost(evt);
            }
        });

        field_cuit1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_cuit1FocusLost(evt);
            }
        });
        field_cuit1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                field_cuit1KeyPressed(evt);
            }
        });

        field_cuit2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_cuit2FocusLost(evt);
            }
        });

        field_cuit3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_cuit3FocusLost(evt);
            }
        });

        field_localidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_localidadFocusLost(evt);
            }
        });
        field_localidad.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                field_localidadInputMethodTextChanged(evt);
            }
        });
        field_localidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                field_localidadKeyPressed(evt);
            }
        });

        field_calle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_calleFocusLost(evt);
            }
        });

        field_sit_frente_iva.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_sit_frente_ivaFocusLost(evt);
            }
        });
        field_sit_frente_iva.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                field_sit_frente_ivaInputMethodTextChanged(evt);
            }
        });
        field_sit_frente_iva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                field_sit_frente_ivaKeyPressed(evt);
            }
        });

        btn_aceptar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_aceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/aceptar.png"))); // NOI18N
        btn_aceptar.setText("ACEPTAR");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        btn_cancelar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cancelar.png"))); // NOI18N
        btn_cancelar.setText("CANCELAR");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        lab_tit_orden.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_tit_orden.setForeground(new java.awt.Color(51, 153, 0));
        lab_tit_orden.setText("ORDEN:");

        lab_orden.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_orden.setText("Tipo");

        lab_tit_modo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_tit_modo.setForeground(new java.awt.Color(204, 0, 0));
        lab_tit_modo.setText("MODO:");

        lab_modo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_modo.setText("Tipo");

        lab_mensaje.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_mensaje.setForeground(java.awt.Color.red);
        lab_mensaje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab_mensaje.setText("mensaje");

        lab_codigo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_codigo.setText("C√≥digo:");

        lab_descripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_descripcion.setText("Nombre:");

        lab_cantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_cantidad.setText("Apellido:");

        lab_cu.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_cu.setText("Localidad:");

        lab_neto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_neto.setText("Direccion:");

        lab_tasa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_tasa.setText("Sit. Frente Iva:");

        lab_tipo_imp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_tipo_imp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lab_tipo_imp.setLabelFor(field_sit_frente_iva);
        lab_tipo_imp.setText(" ");

        lab_cantidad1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_cantidad1.setText("Cuit:");

        lab_cantidad2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_cantidad2.setText("Fecha Nacimiento:");

        lab_neto1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_neto1.setText("Calle N¬∫:");

        lab_localidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lab_localidad.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lab_localidad.setLabelFor(field_localidad);
        lab_localidad.setText(" ");

        javax.swing.GroupLayout panel_datosLayout = new javax.swing.GroupLayout(panel_datos);
        panel_datos.setLayout(panel_datosLayout);
        panel_datosLayout.setHorizontalGroup(
            panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datosLayout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(btn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120)
                .addComponent(btn_cancelar)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_datosLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_datosLayout.createSequentialGroup()
                        .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lab_cantidad)
                            .addComponent(lab_descripcion)
                            .addComponent(lab_codigo)
                            .addComponent(lab_cantidad2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(field_fecha_nac, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(field_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(field_nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                                .addComponent(field_apellido))))
                    .addGroup(panel_datosLayout.createSequentialGroup()
                        .addComponent(lab_cantidad1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_cuit1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_cuit2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_cuit3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_neto1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lab_tasa, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lab_neto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lab_cu, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(field_calle, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_datosLayout.createSequentialGroup()
                        .addComponent(field_sit_frente_iva, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lab_tipo_imp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panel_datosLayout.createSequentialGroup()
                        .addComponent(field_localidad, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lab_localidad, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(field_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_datosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lab_tit_orden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lab_orden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lab_tit_modo)
                .addGap(18, 18, 18)
                .addComponent(lab_modo, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
            .addComponent(lab_mensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_datosLayout.setVerticalGroup(
            panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab_tit_orden)
                    .addComponent(lab_orden)
                    .addComponent(lab_tit_modo)
                    .addComponent(lab_modo))
                .addGap(39, 39, 39)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab_codigo)
                    .addComponent(lab_cu)
                    .addComponent(field_localidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab_localidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab_descripcion)
                    .addComponent(field_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab_neto)
                    .addComponent(field_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab_cantidad)
                    .addComponent(field_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab_neto1)
                    .addComponent(field_calle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_fecha_nac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab_cantidad2)
                    .addComponent(lab_tasa)
                    .addComponent(field_sit_frente_iva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab_tipo_imp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_cuit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(field_cuit2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(field_cuit3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab_cantidad1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lab_mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        panel_desplazamiento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btn_primero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-circle-left-2x.png"))); // NOI18N
        btn_primero.setText("Primero");
        btn_primero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_primeroActionPerformed(evt);
            }
        });

        btn_anterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-left-2x.png"))); // NOI18N
        btn_anterior.setText("Anterior");
        btn_anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_anteriorActionPerformed(evt);
            }
        });

        btn_proximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-right-2x.png"))); // NOI18N
        btn_proximo.setText("Pr√≥ximo");
        btn_proximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_proximoActionPerformed(evt);
            }
        });

        btn_ultimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-circle-right-2x.png"))); // NOI18N
        btn_ultimo.setText("√öltimo");
        btn_ultimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ultimoActionPerformed(evt);
            }
        });

        field_buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                field_buscarKeyPressed(evt);
            }
        });

        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/buscar.png"))); // NOI18N
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        lab_buscar.setText("Buscar:");

        javax.swing.GroupLayout panel_desplazamientoLayout = new javax.swing.GroupLayout(panel_desplazamiento);
        panel_desplazamiento.setLayout(panel_desplazamientoLayout);
        panel_desplazamientoLayout.setHorizontalGroup(
            panel_desplazamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_desplazamientoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_primero)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_anterior)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_proximo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_ultimo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lab_buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(field_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_buscar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_desplazamientoLayout.setVerticalGroup(
            panel_desplazamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_desplazamientoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_desplazamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_buscar)
                    .addGroup(panel_desplazamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_primero)
                        .addComponent(btn_anterior)
                        .addComponent(btn_proximo)
                        .addComponent(btn_ultimo)
                        .addComponent(field_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lab_buscar)))
                .addContainerGap())
        );

        menu_interno.setBorderPainted(false);

        menu_alta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/check-4x.png"))); // NOI18N
        menu_alta.setText("ALTA");
        menu_alta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_altaMouseClicked(evt);
            }
        });
        menu_interno.add(menu_alta);

        menu_baja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/baja.png"))); // NOI18N
        menu_baja.setText("BAJA");
        menu_baja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_bajaMouseClicked(evt);
            }
        });
        menu_interno.add(menu_baja);

        menu_mod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/reload-4x.png"))); // NOI18N
        menu_mod.setText(" MODIFICACI√ìN");
        menu_mod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_modMouseClicked(evt);
            }
        });
        menu_interno.add(menu_mod);

        menu_recorrido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/magnifying-glass-4x.png"))); // NOI18N
        menu_recorrido.setText(" ORDEN RECORRIDO ");
        menu_interno.add(menu_recorrido);

        menu_listar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/listado.png"))); // NOI18N
        menu_listar.setText("LISTADO");
        menu_listar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_listarMouseClicked(evt);
            }
        });
        menu_interno.add(menu_listar);

        menu_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/circle-x-4x.png"))); // NOI18N
        menu_salir.setText("SALIR           ");
        menu_salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_salirMouseClicked(evt);
            }
        });
        menu_interno.add(menu_salir);

        setJMenuBar(menu_interno);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_ayuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_datos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_desplazamiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel_datos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_desplazamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(panel_ayuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        cargar_ValoresPorFila(tabla.rowAtPoint(evt.getPoint()));
        scrollCellToView(this.tabla,tabla.getSelectedRow(),1);        
    }//GEN-LAST:event_tablaMouseClicked
    
    private void menu_altaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_altaMouseClicked
        menuDisponible(false);
        lab_modo.setText("Alta");
        vaciarCampos();
        camposEditables(true);
        ayudaDisponible(false);
        btn_aceptar.setEnabled(false);
        btn_cancelar.setEnabled(true);
        //field_codigo.requestFocus();
        this.moveToFront();
        panel_datos.requestFocusInWindow();
        panel_datos.nextFocus();
    }//GEN-LAST:event_menu_altaMouseClicked

    private void menu_bajaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_bajaMouseClicked
        menuDisponible(false);
        lab_modo.setText("Baja");
        camposEditables(false);
        ayudaDisponible(false);
        btn_aceptar.setEnabled(true);
        btn_cancelar.setEnabled(true);
        mostrar_Msj_Error("¬øEst√° seguro que desea Eliminar?");
        btn_aceptar.requestFocus();
    }//GEN-LAST:event_menu_bajaMouseClicked

    private void menu_modMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_modMouseClicked
        menuDisponible(false);
        lab_modo.setText("Modificaci√≥n");
        camposEditables(true);
        ayudaDisponible(false);
        btn_aceptar.setEnabled(true);
        btn_cancelar.setEnabled(true);
        mostrar_Msj_Error("¬øEst√° seguro que desea Modificar?");
        field_codigo.requestFocus();
    }//GEN-LAST:event_menu_modMouseClicked

    private void btn_primeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_primeroActionPerformed
        if (tabla.getRowCount()>0){
            scrollToCenter(this.tabla,0,0);
            tabla.setRowSelectionInterval(0,0); 
            cargar_ValoresPorFila(0);
        }
    }//GEN-LAST:event_btn_primeroActionPerformed

    private void btn_ultimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ultimoActionPerformed
        if (tabla.getRowCount()>0){
            scrollToCenter(this.tabla,tabla.getRowCount(),tabla.getRowCount());
            tabla.setRowSelectionInterval(tabla.getRowCount()-1,tabla.getRowCount()-1); 
            cargar_ValoresPorFila(tabla.getRowCount()-1);
        }
    }//GEN-LAST:event_btn_ultimoActionPerformed

    private void menu_salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_salirMouseClicked
        this.dispose();
    }//GEN-LAST:event_menu_salirMouseClicked

    private void btn_anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_anteriorActionPerformed
        if ((fila_ultimo_registro-1 >= 0)&&(fila_ultimo_registro-1 < tabla.getRowCount())){             
            tabla.setRowSelectionInterval(fila_ultimo_registro-1,fila_ultimo_registro-1);
            scrollCellToView(this.tabla,fila_ultimo_registro-1,fila_ultimo_registro-1); 
            cargar_ValoresPorFila(fila_ultimo_registro-1);  
        }
    }//GEN-LAST:event_btn_anteriorActionPerformed

    private void btn_proximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_proximoActionPerformed
        if ((fila_ultimo_registro+1 >= 0)&&(fila_ultimo_registro+1 < tabla.getRowCount())){                      
            tabla.setRowSelectionInterval(fila_ultimo_registro+1,fila_ultimo_registro+1); 
            scrollCellToView(this.tabla,fila_ultimo_registro+1,fila_ultimo_registro+1);
            cargar_ValoresPorFila(fila_ultimo_registro+1);   
        }
    }//GEN-LAST:event_btn_proximoActionPerformed

    public int buscarValor (String valor){
        if (tabla.getRowCount()>0){
            return busquedaBinaria(valor.toUpperCase(),0,tabla.getRowCount()-1,relacion_indices_conTabla[numero_ordenamiento_elegido]); 
        }
        else{
            return -1;
        }
    } 

    private int busquedaBinaria(String elemento, int ini, int fin, int nro_campo_tabla){
        int posicion;
        int M = (int)(ini+fin)/2;

        //CB1
        
        if ((tabla.getValueAt(M,nro_campo_tabla)!=(null))&&(elemento.equals((tabla.getValueAt(M,nro_campo_tabla).toString()).toUpperCase()))){
                posicion = M;
            }              
        else{
            //CB2
                if (ini >= fin){
                    posicion = -1;
                }  
            //CG
            else{
                if (compare(((tabla.getValueAt(M,nro_campo_tabla)).toString().toUpperCase()),elemento) < 0){
                    ini = M+1;
                    posicion = busquedaBinaria (elemento,ini,fin,nro_campo_tabla);
                }
                else{
                    fin = M-1;
                    posicion = busquedaBinaria (elemento,ini,fin,nro_campo_tabla);
                }            
            }
        }
        return(posicion);
    }
    
//*******************************************************************************************************
//Este algoritmo reemplaza al compareTo de Java, ya que mejora problemas como por ejemplo comparar
// cadenas y numeros, dado que 2.compareTo(10) devolvia 1, siendo que no es asi.
    private final boolean isDigit(char ch)
    {
        return ch >= 48 && ch <= 57;
    }

    /** Length of string is passed in for improved efficiency (only need to calculate it once) **/
    private final String getChunk(String s, int slength, int marker)
    {
        StringBuilder chunk = new StringBuilder();
        char c = s.charAt(marker);
        chunk.append(c);
        marker++;
        if (isDigit(c))
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (!isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        } else
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        }
        return chunk.toString();
    }

    public int compare(String o1, String o2)
    {
        String s1 = (String)o1;
        String s2 = (String)o2;

        int thisMarker = 0;
        int thatMarker = 0;
        int s1Length = s1.length();
        int s2Length = s2.length();

        while (thisMarker < s1Length && thatMarker < s2Length)
        {
            String thisChunk = getChunk(s1, s1Length, thisMarker);
            thisMarker += thisChunk.length();

            String thatChunk = getChunk(s2, s2Length, thatMarker);
            thatMarker += thatChunk.length();

            // If both chunks contain numeric characters, sort them numerically
            int result = 0;
            if (isDigit(thisChunk.charAt(0)) && isDigit(thatChunk.charAt(0)))
            {
                // Simple chunk comparison by length.
                int thisChunkLength = thisChunk.length();
                result = thisChunkLength - thatChunk.length();
                // If equal, the first different number counts
                if (result == 0)
                {
                    for (int i = 0; i < thisChunkLength; i++)
                    {
                        result = thisChunk.charAt(i) - thatChunk.charAt(i);
                        if (result != 0)
                        {
                            return result;
                        }
                    }
                }
            } else
            {
                result = thisChunk.compareTo(thatChunk);
            }

            if (result != 0)
                return result;
        }
        return s1Length - s2Length;
    }
//*******************************************************************************************************
    
    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        accion_Buscar();
    }//GEN-LAST:event_btn_buscarActionPerformed
    
    private void accion_Buscar(){
        int rta = buscarValor(field_buscar.getText());
        if (rta >= 0){
            posicionarAyuda(field_buscar.getText());
            //ocultar_Msj();
            //cargar_ValoresPorFila(rta);
            //scrollCellToView(this.tabla,rta,1);
            //tabla.setRowSelectionInterval(rta, rta);
        }
        else{
            field_buscar.requestFocus();
            String campobuscado = colum_names_tabla[relacion_indices_conTabla[numero_ordenamiento_elegido]];
            mostrar_Msj_Error("No se encontro '"+campobuscado+"' para el valor : "+field_buscar.getText());
        }  
    }
    
    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        ocultar_Msj();
        menuDisponible(true); 
        modoConsulta();
        if (field_codigo.getText().equals("")){
            cargar_ValoresPorFila(this.fila_ultimo_registro);
        }
        else{
            posicionarAyuda(field_codigo.getText());
        }
        
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
       if (lab_modo.getText().equals("Alta")){
            if (camposCompletos()){
                ocultar_Msj();
                if (insertar()){               
                    menuDisponible(true); 
                    modoConsulta();           
                    updateTabla(); 
                }              
            }
            else{
                mostrar_Msj_Error("Por favor, complete todos los campos solicitados");
            }
        }
        else{
            if (lab_modo.getText().equals("Baja")){
                if (!field_codigo.getText().equals("")){
                    if(!existe(field_codigo.getText())){
                        mostrar_Msj_Error("Ingrese un codigo que se encuentre registrado en el sistema");
                        field_codigo.requestFocus();
                    }
                    else{                  
                        ocultar_Msj();
                        eliminar();                    
                        menuDisponible(true); 
                        modoConsulta();
                        vaciarCampos();
                        updateTabla(); 
                    }
                }
                else{
                    mostrar_Msj_Error("Por favor, complete todos los campos solicitados");
                }
            }
            else{
                if (lab_modo.getText().equals("Modificaci√≥n")){
                    if (!field_codigo.getText().equals("")){
                        if(!existe(field_codigo.getText())){
                            mostrar_Msj_Error("Ingrese un codigo que se encuentre registrado en el sistema");
                            field_codigo.requestFocus();
                        }
                        else{
                            if (camposCompletos()){
                                ocultar_Msj();
                                modificar();
                                menuDisponible(true); 
                                modoConsulta();
                                updateTabla();              
                            }
                            else{
                                mostrar_Msj_Error("Por favor, complete todos los campos solicitados");
                            }                                                
                        }
                    }
                    else{
                        mostrar_Msj_Error("Por favor, complete todos los campos solicitados");
                    }
                }
            }
        }
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void field_codigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_codigoKeyTyped
        onlyNum(evt);
    }//GEN-LAST:event_field_codigoKeyTyped

    private void field_buscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_buscarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            accion_Buscar();            
        }
    }//GEN-LAST:event_field_buscarKeyPressed

    private void field_sit_frente_ivaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_sit_frente_ivaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_F1){           
           generarAyuda_Situacion_Frente_Iva();
        }
    }//GEN-LAST:event_field_sit_frente_ivaKeyPressed

    private void field_sit_frente_ivaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_sit_frente_ivaFocusLost
        if((field_sit_frente_iva.isEditable())&&(validar.isInt(field_calle.getText()))){
            boolean es_componente=false;
            //voy a preguntar si la componente que me saco el foco es algun campo del panel de datos de asientos        
            int i=0;        
            Component[] components = panel_datos.getComponents();
            while ((!es_componente)&&(i<components.length)){
                if (components[i]==evt.getOppositeComponent()){
                    es_componente=true;
                }
                i++;
            }            
            if((es_componente)&&(field_codigo.isEditable())){            
                String id_sfi=field_sit_frente_iva.getText();
                   if(!id_sfi.equals("")){
                        String descripcion =get_Tipo_Sit_frente_Iva(id_sfi);
                        if (!descripcion.equals("")){
                            lab_tipo_imp.setText("("+descripcion+")");
                        }
                        else{
                            field_sit_frente_iva.requestFocus();
                            this.generarAyuda_Situacion_Frente_Iva();
                        }
                   }
                   else{   
                       this.mostrar_Msj_Error("El tipo de Situacion Frente IVA esta vacio, debe ingresar un valor");
                       field_sit_frente_iva.requestFocus();
                   }
             }
             else{        
                 this.ocultar_Msj();
             }
        }
    }//GEN-LAST:event_field_sit_frente_ivaFocusLost

    private void field_sit_frente_ivaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_field_sit_frente_ivaInputMethodTextChanged
        // TODO add your handling code here:       
        String descripcion = get_Tipo_Sit_frente_Iva(field_sit_frente_iva.getText());
        if (!descripcion.equals("")){
            lab_tipo_imp.setText("("+descripcion+")");
        }
    }//GEN-LAST:event_field_sit_frente_ivaInputMethodTextChanged

    private void field_codigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_codigoFocusLost
        if (field_codigo.isEditable() && (lab_modo.getText().equals("Alta"))){
            if ((evt.getOppositeComponent()!=null)&&(!evt.getOppositeComponent().equals(btn_cancelar))){
                if (!field_codigo.getText().equals("")){
                    if (!existe(field_codigo.getText())){
                        btn_aceptar.setEnabled(true);
                        this.ocultar_Msj();
                    }
                    else{
                        field_codigo.requestFocus();
                        this.mostrar_Msj_Error("El c√≥digo del Cliente ya se encuentra registrado.");
                    }
                }
                else{
                    field_codigo.requestFocus();
                    this.mostrar_Msj_Error("Debe ingresar un codigo de Cliente.");
                } 
            }           
        }       
    }//GEN-LAST:event_field_codigoFocusLost

    private void field_fecha_nacFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_fecha_nacFocusLost
        // TODO add your handling code here:
        if (fecha.isFechaValida(field_fecha_nac.getText())){
            mostrar_Msj_Error(" ");
            //fecha_nac=true;
        }
        else{
            mostrar_Msj_Error("La Fecha ingresada no se reconoce como valida.");                
            }        
    }//GEN-LAST:event_field_fecha_nacFocusLost

    private void field_localidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_localidadFocusLost
        
            boolean es_componente=false;
         //   voy a preguntar si la componente que me saco el foco es algun campo del panel de datos de asientos        
            int i=0;        
            Component[] components = panel_datos.getComponents();
            while ((!es_componente)&&(i<components.length)){
                if (components[i]==evt.getOppositeComponent()){
                    es_componente=true;
                }
                i++;
            }
            if((es_componente)&&(field_codigo.isEditable())){            
                String id_sfi=field_localidad.getText();
                   if(!id_sfi.equals("")){
                        String descripcion =get_tipo_localidad(id_sfi);
                        if (!descripcion.equals("")){
                            lab_localidad.setText(descripcion);
                        }
                        else{
                            field_localidad.requestFocus();
                            this.generarAyuda_Localidades();
                        }
                   }
                   else{   
                       this.mostrar_Msj_Error("El campo Localidad esta vacio, debe ingresar un valor");
                       field_localidad.requestFocus();
                   }
             }
             else{        
                 this.ocultar_Msj();
             }                
     
    }//GEN-LAST:event_field_localidadFocusLost

    private void field_localidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_localidadKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1){            
           generarAyuda_Localidades();
        }
    }//GEN-LAST:event_field_localidadKeyPressed

    private void field_localidadInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_field_localidadInputMethodTextChanged
        String descripcion = get_tipo_localidad(field_localidad.getText());
        if (!descripcion.equals("")){
            lab_localidad.setText(descripcion);
        }        
    }//GEN-LAST:event_field_localidadInputMethodTextChanged

    private void field_cuit3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_cuit3FocusLost
        
        if(field_cuit3.isEditable()){
            String cuit1=field_cuit1.getText();
            String cuit2=field_cuit2.getText();
            String cuit3=field_cuit3.getText();
            if(!field_cuit2.getText().equals("")){
                this.ocultar_Msj();
                if(!validar.isInt(field_cuit3.getText())){
                   this.mostrar_Msj_Error("Debe ingresar el digitos DV correspondiente al CUIT");
                   field_cuit3.requestFocus();
                }
                if(field_cuit3.getText().equals("")){
                    this.mostrar_Msj_Error("El campo CUIT-DV se encuentra vacio, debe ingresar un valor");
                    field_cuit3.requestFocus();
                }
                if(validar.isCuit(cuit1,cuit2,cuit3)){
                    this.mostrar_Msj_Exito("El CUIT ingresado es correcto");
                }
                else{
                    this.mostrar_Msj_Error("El campo CUIT ingresado es incorrecto");
                }
            }        
        }
    }//GEN-LAST:event_field_cuit3FocusLost

    private void field_cuit1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_cuit1FocusLost
        if(field_cuit1.isEditable()){            
            if(!validar.isInt(field_cuit1.getText())){
                this.mostrar_Msj_Error("Debe ingresar dos digitos en el campo CUIT");
                field_cuit1.requestFocus();
            }
            if(field_cuit1.getText().equals("")){
                this.mostrar_Msj_Error("El campo CUIT se encuentra vacio, debe ingresar un valor");
                field_cuit1.requestFocus();
            }        
        }
    }//GEN-LAST:event_field_cuit1FocusLost

    private void field_cuit2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_cuit2FocusLost
        if(field_cuit2.isEditable()){
            if(!field_cuit1.getText().equals("")){
                this.ocultar_Msj();
                if(!validar.isInt(field_cuit2.getText())){
                   this.mostrar_Msj_Error("Debe ingresar el numero correspondiente al CUIT");
                   field_cuit2.requestFocus();
                }
                if(field_cuit2.getText().equals("")){
                    this.mostrar_Msj_Error("El campo CUIT-Numero se encuentra vacio, debe ingresar un valor");
                    field_cuit2.requestFocus();
                }
            }        
        }
    }//GEN-LAST:event_field_cuit2FocusLost

    private void field_calleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_calleFocusLost
        if(field_calle.isEditable()){
            if(!validar.isInt(field_calle.getText())){
                this.mostrar_Msj_Error("El campo Calle es incorrecto, debe ingresar un valor numerico");
                //field_calle.requestFocus();
            }
            else{
                this.ocultar_Msj();
            }
        }
        
    }//GEN-LAST:event_field_calleFocusLost

    private void field_cuit1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_cuit1KeyPressed
        if((evt.getKeyCode() == KeyEvent.VK_ESCAPE)){
            field_cuit1.setEditable(false);
            field_cuit2.setEditable(false);
            field_cuit3.setEditable(false);
            field_localidad.nextFocus();
        }
        if((evt.getKeyCode() == KeyEvent.VK_ENTER)){
            field_cuit1.setEditable(true);
            field_cuit2.setEditable(true);
            field_cuit3.setEditable(true);
        }
    }//GEN-LAST:event_field_cuit1KeyPressed

    private void menu_listarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_listarMouseClicked
        IGUI_Listado_Clientes np = new IGUI_Listado_Clientes(r_con);
        int x = (this.getDesktopPane().getWidth() / 2) - np.getWidth() / 2;
        int y = (this.getDesktopPane().getHeight() / 2) - np.getHeight() / 2;
        np.setLocation(x, y);
        np.setVisible(true);
        this.getDesktopPane().add(np);
        try {
            np.setSelected(true);
        }
        catch (PropertyVetoException ex) {
            Logger.getLogger(IGUI_Productos.class.getName()).log(Level.SEVERE, null, ex);
        }
        np.moveToFront();
    }//GEN-LAST:event_menu_listarMouseClicked
    
    private String get_tipo_localidad(String clave){
        String descripcion = "";
        try {
            r_con.Connection();
            String sql=(
                    "SELECT loc_descripcion "+
                    " FROM localidades"+
                    " WHERE loc_codigo_postal = "+clave);
            
            ResultSet res = r_con.Consultar(sql);            
            while(res.next()){
                descripcion=(res.getString(1));
            }
            
            res.close();
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Clientes.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        }
        return(descripcion);
    }
    
    
    private String get_Tipo_Sit_frente_Iva (String clave){
        String descripcion = "";
        try {
            r_con.Connection();
            String sql=(
                    "SELECT sfi_descripcion "+
                    " FROM situacion_frente_iva"+
                    " WHERE sfi_id = "+clave);
            
            ResultSet res = r_con.Consultar(sql);            
            while(res.next()){
                descripcion=(res.getString(1));
            }
            
            res.close();
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Clientes.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        }
        return(descripcion);
    }
    
    public void generarAyuda_Localidades(){        
        GUI_Ayuda_Localidad np=new GUI_Ayuda_Localidad(r_con,this);
        //lo centro respecto a x
        int x = (this.getDesktopPane().getWidth() / 2) - np.getWidth() / 2;
        int y = (this.getDesktopPane().getHeight() / 2) - np.getHeight() / 2;
        np.setLocation(x, y);
        np.setVisible(true);
        this.getDesktopPane().add(np);
        try {                
            np.setSelected(true);            
         } 
        catch (PropertyVetoException ex) {
            Logger.getLogger(IGUI_Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        np.moveToFront();
        np.requestFocus();         
    }
        
    
    public void generarAyuda_Situacion_Frente_Iva(){
        GUI_Ayuda_Sit_Frente_Iva np=new GUI_Ayuda_Sit_Frente_Iva(r_con,this);
        //lo centro respecto a x
        int x = (this.getDesktopPane().getWidth() / 2) - np.getWidth() / 2;
        int y = (this.getDesktopPane().getHeight() / 2) - np.getHeight() / 2;
        np.setLocation(x, y);        
        //lo hago visible, lo agrego al DesktopPanel, hago foco.
        np.setVisible(true);
        this.getDesktopPane().add(np);
        try {                
            np.setSelected(true);            
         } 
        catch (PropertyVetoException ex) {
            Logger.getLogger(IGUI_Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        np.moveToFront();
        np.requestFocus();         
    }
    
    private void cargarOrdenamientos () {         
        ButtonGroup grupo_recorridos;
        grupo_recorridos = new javax.swing.ButtonGroup();
        for (int i = 0; i < indices_tabla.length; i++) {            
            JCheckBoxMenuItem item = new javax.swing.JCheckBoxMenuItem(name_indicesTabla[i],new javax.swing.ImageIcon(getClass().getResource("/Iconos/item.png")));
            item.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    detectarOrden ();
                }
            });
            grupo_recorridos.add(item);
            menu_recorrido.add(item);
            if (i==numero_ordenamiento_elegido){
                item.setSelected(true);
            }
        } 
    }
    
    /**
     * el metodo detecta que orden fue seleccionado entre los valores de "orden de recorrido"
     */
    private void detectarOrden (){        
        int i = 0;
        boolean detecte = false;
        
        while ((!detecte)&&(i < this.menu_recorrido.getItemCount())) {            
            if(this.menu_recorrido.getItem(i).isSelected()){
                JMenuItem item = menu_recorrido.getItem(i);
                numero_ordenamiento_elegido = i;
                modo_ordenamiento_elegido = item.getText();
                lab_orden.setText(menu_recorrido.getItem(i).getText());
            }
            i++;
        }
        //** cambiado el orden, actualizo los valores de la tabla respecto al orden
        updateTabla();
    }    
    
    /**
     * metodo que vuelca los valores al panel de datos
     * @param valor indica una numero de registro
     */
    private void cargar_Campos (String valor){
        try{    
            this.vaciarCampos();
            r_con.Connection();
            PreparedStatement pstm = r_con.getConn().prepareStatement(
                    "SELECT cli_codigo,cli_nombre,cli_apellido,cli_fecha_nac,cli_cuit,loc_descripcion,cli_direccion,cli_calle,sfi_descripcion, loc_codigo_postal,sfi_id "+ 
                                  "FROM clientes,localidades,situacion_frente_iva " +
                                  "WHERE cli_localidad=loc_id and cli_sit_frente_iva=sfi_id and cli_codigo="+valor);                                                                    

            ResultSet res = pstm.executeQuery();            
            if(res.next()){                   
                field_codigo.setText(res.getString(1));
                field_nombre.setText(res.getString(2));
                field_apellido.setText(res.getString(3));
                String fecha_nac=res.getString(4);
                if(fecha_nac!=null)
                    field_fecha_nac.setText(fecha.convertirBarras(fecha_nac));
                else
                    field_fecha_nac.setText("");
                String cuit=res.getString(5);
                if((cuit!=null)&&(!cuit.equals(""))){
                    field_cuit1.setText(cuit.substring(0, 2));
                    field_cuit2.setText(cuit.substring(2, 10));
                    field_cuit3.setText(cuit.substring(10, 11));
                }
                else{
                    field_cuit1.setText("");
                    field_cuit2.setText("");
                    field_cuit3.setText("");
                }
                field_localidad.setText(res.getString(10));
                lab_localidad.setText(res.getString(6));
                field_direccion.setText(res.getString(7));
                field_calle.setText(res.getString(8));
                field_sit_frente_iva.setText(res.getString(11));
                lab_tipo_imp.setText(res.getString(9));
                
            }                            
            res.close();
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }           
    }   
    
    /**
     * metodo que vuelca los valores de la tabla de ayuda a los registros del panel de datos
     * @param fila indica una fila valida dentro de la tabla, gestiona la posicion fila_registro
     */
    private void cargar_ValoresPorFila (int fila){
        this.ocultar_Msj();
        field_buscar.setText("");
        if ((fila >= 0)&&(fila < tabla.getRowCount())){
            fila_ultimo_registro=fila;
            String codigo = String.valueOf(tabla.getValueAt(fila, 0));
            cargar_Campos(codigo);
        }
    }
    
    /**
     * realiza una consulta a la tabla Cuentas de la BD y la vuelca a la jTable
     */
    private void updateTabla(){ 
                      
        //** pido los datos a la tabla  
        Object[][] vcta = this.getDatos();
               
        //** se colocan los datos en la tabla
        DefaultTableModel datos = new DefaultTableModel();                        
        tabla.setModel(datos);         
        datos = new DefaultTableModel(vcta,colum_names_tabla);                        
        tabla.setModel(datos); 
        
        //ajustamos tama√±o de la celda Fecha Alta
        /*TableColumn columna = tabla.getColumn("Fecha Alta");        
        columna.setPreferredWidth(100);
        columna.setMinWidth(100);
        columna.setMaxWidth(100);*/
        
        if (!field_codigo.getText().equals("")){
            posicionarAyuda(field_codigo.getText());
        }
        else{
            if ((fila_ultimo_registro-1 >= 0)&&(fila_ultimo_registro-1 < tabla.getRowCount())){             
                tabla.setRowSelectionInterval(fila_ultimo_registro-1,fila_ultimo_registro-1);
                scrollCellToView(this.tabla,fila_ultimo_registro-1,fila_ultimo_registro-1); 
                cargar_ValoresPorFila(fila_ultimo_registro-1);  
            }
            else{
                 if ((fila_ultimo_registro+1 >= 0)&&(fila_ultimo_registro+1 <= tabla.getRowCount())){                      
                    tabla.setRowSelectionInterval(fila_ultimo_registro,fila_ultimo_registro); 
                    scrollCellToView(this.tabla,fila_ultimo_registro,fila_ultimo_registro);
                    cargar_ValoresPorFila(fila_ultimo_registro);   
                }
            }
        }
    }
    
    /**
     * posiciona la ayuda, cargando los datos de la cuenta al panel de datos y centrando la tabla
     * al valor selecionado 
     * @param valor numero de la registro seleccionado
     */
    private void posicionarAyuda(String valor) {
        int posicion = buscarValor(valor);      
        if (posicion>=0){
            cargar_ValoresPorFila(posicion);
            ocultar_Msj();
            scrollCellToView(this.tabla,posicion,1);
            tabla.setRowSelectionInterval(posicion,posicion);
        }
    }
    
    /**
     * metodo que maneja el modelo de una jTable para centrar el scroll al medio
     * @param table la jTable a centrar
     * @param rowIndex numero de la fila a centrar al medio
     * @param vColIndex valor por defecto = 1, es para obtener el Rectangle de la jTable
     */
    private static void scrollToCenter(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
          return;
        }
        JViewport viewport = (JViewport) table.getParent();
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);
        Rectangle viewRect = viewport.getViewRect();
        rect.setLocation(rect.x - viewRect.x, rect.y - viewRect.y);

        int centerX = (viewRect.width - rect.width); // / 2;
        int centerY = (viewRect.height - rect.height); // / 2;
        if (rect.x < centerX) {
          centerX = -centerX;
        }
        if (rect.y < centerY) {
          centerY = -centerY;
        }
        rect.translate(centerX, centerY);
        viewport.scrollRectToVisible(rect);
    }
    
    /**
     * metodo que maneja el modelo de una jTable para que sea visible al usuario
     * @param table la jTable a hacer visivle
     * @param rowIndex numero de la fila actual
     * @param vColIndex valor por defecto = 1, es para obtener el Rectangle de la jTable
     */
    public void scrollCellToView(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
            return;
        }
        JViewport viewport = (JViewport) table.getParent();
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);
        Rectangle viewRect = viewport.getViewRect();

        int x = viewRect.x;
        int y = viewRect.y;

        if (rect.x >= viewRect.x && rect.x <= (viewRect.x + viewRect.width - rect.width)){

        } else if (rect.x < viewRect.x){
            x = rect.x;
        } else if (rect.x > (viewRect.x + viewRect.width - rect.width)) {
            x = rect.x - viewRect.width + rect.width;
        }

        if (rect.y >= viewRect.y && rect.y <= (viewRect.y + viewRect.height - rect.height)){

        } else if (rect.y < viewRect.y){
            y = rect.y;
        } else if (rect.y > (viewRect.y + viewRect.height - rect.height)){
            y = rect.y - viewRect.height + rect.height;
        }

        viewport.setViewPosition(new Point(x,y));
    }
    
    /**
     * devuelve la cantidad actual de cuentas en la Base de Datos
     * @return valor entero de la cantidad de cuentas
     */
    private int getCantidad_Cuentas (){
        int registros = 0;
        //obtenemos la cantidad de registros existentes en la tabla
        try{         
           r_con.Connection();           
           PreparedStatement pstm = r_con.getConn().prepareStatement("SELECT count(1) as total FROM "+name_tabla);
           ResultSet res = pstm.executeQuery();
           res.next();
           registros = res.getInt("total");
           res.close();
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }
        
        return registros;
    }
    
    /**
     * obtiene todos los datos de la tabla y los carga a una matriz de objetos
     * @return retorna una matriz de objetos, cuya finalidad es setearla directamente
     *         al modelo de la jTable
     */
    public Object [][] getDatos(){                 
        Object[][] data = new String[getCantidad_Cuentas ()][colum_names.length];  
        //realizamos la consulta sql y llenamos los datos en "Object"
        try{    
            if (colum_names.length>=0){
                r_con.Connection();

                String campos = colum_names[0];
                for (int i = 1; i < colum_names.length; i++) {
                    campos+=",";
                    campos+=colum_names[i];
                }

                String consulta = ("SELECT cli_codigo,cli_nombre,cli_apellido,cli_fecha_nac,cli_cuit,loc_descripcion,cli_direccion,cli_calle,sfi_descripcion "+ 
                                  "FROM clientes,localidades,situacion_frente_iva " +
                                  "WHERE cli_localidad=loc_id and cli_sit_frente_iva=sfi_id "); //+
                                 //" WITH (INDEX("+indices_tabla[numero_ordenamiento_elegido]+"))");

                PreparedStatement pstm = r_con.getConn().prepareStatement(consulta);

                ResultSet res = pstm.executeQuery();
                int i = 0;
                while(res.next()){
                    for (int j = 0; j < colum_names.length; j++) {  
                        data[i][j] = res.getString(j+1);
                    }     
                    i++;
                }
                res.close();
            }
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }
        return data;
    }
    
    /*
    * consulta utilizada para saber si existe un registro en el Sistema 
    */
    private boolean existe (String nro){
        boolean existe = false;
        try {
            r_con.Connection();
            PreparedStatement pstm = r_con.getConn().prepareStatement(
                    "SELECT * "+
                    " FROM "+name_tabla+
                    " WHERE cli_codigo = "+nro);
            
            ResultSet res = pstm.executeQuery();
            
            while(res.next()){
                existe = true;
            }
            res.close();
        } catch (SQLException ex) {
            Logger.getLogger(IGUI_Clientes.class.getName()).log(Level.SEVERE, null, ex);
        } finally {            
            r_con.cierraConexion();
        }
        return existe;
    }
    
    private boolean insertar(){             
        boolean inserto = false;                
        try{
        r_con.Connection();        
        String cuit=field_cuit1.getText()+field_cuit2.getText()+field_cuit3.getText();        
        String fecha_nac=field_fecha_nac.getText();
        if(!fecha.isFechaValida(fecha_nac))
            fecha_nac=null;
        else
            fecha_nac="'"+fecha_nac+"'";
        int loc_cod=-1;
        String loc=lab_localidad.getText();
        ResultSet rs=r_con.Consultar("select * from localidades where loc_codigo_postal="+field_localidad.getText()+" and loc_descripcion='"+loc+"'");
        if(rs.next()){
            loc_cod=rs.getInt("loc_id");
        }                
        String sql = "INSERT INTO "+name_tabla
                   + " VALUES('"+field_codigo.getText()+"','"
                            +field_nombre.getText()+"','"
                            +field_apellido.getText()+"',"
                            +fecha_nac+",'"
                            +cuit+"',"
                            +loc_cod+",'"
                            +field_direccion.getText()+"',"
                            +field_calle.getText()+","
                            +field_sit_frente_iva.getText()+")";        
       
        r_con.InsertarSinCartel(sql);
        inserto=true;
        mostrar_Msj_Exito("Nuevo Cliente registrado en el Sistema.");
        /*if(r_con.InsertarSinCartel(sql)){
            inserto=true;
            mostrar_Msj_Exito("Nuevo Cliente registrado en el Sistema.");
        }
        else{
            inserto=false;
            field_codigo.requestFocus();
        }*/
        }
        catch(Exception e){
            mostrar_Msj_Error("El cliente no fue registrado, vuelva a intentarlo nuevamente");
            return false;}
        return(inserto);
    }
    
    private void eliminar(){
        if (!field_codigo.getText().equals("")){
            r_con.Connection();
            r_con.Borrar("DELETE FROM "+name_tabla+" WHERE cli_codigo = '"+field_codigo.getText()+"'");         
            r_con.cierraConexion();
        }
    }
    
    private void modificar(){
        try{
        r_con.Connection(); 
        
        // Controlo los campos Numericos si son en blanco hay que ponerle null, sino da error
        // ej:String dni = field_codigo.getText();        
        String cuit=field_cuit1.getText()+field_cuit2.getText()+field_cuit3.getText();
        
        int loc_cod=-1;
        String loc=lab_localidad.getText();
        ResultSet rs=r_con.Consultar("select * from localidades where loc_codigo_postal="+field_localidad.getText()+" and loc_descripcion='"+loc+"'");
        if(rs.next()){
            loc_cod=rs.getInt("loc_id");
        }
                
        r_con.ActualizarSinCartel("UPDATE "+name_tabla+" SET "
                + "cli_nombre = '"+field_nombre.getText()+"', "
                + "cli_apellido = '"+field_apellido.getText()+"',"
                + "cli_fecha_nac = '"+field_fecha_nac.getText()+"',"
                + "cli_cuit = '"+cuit+"',"
                + "cli_localidad = "+loc_cod+","
                + "cli_direccion = '"+field_direccion.getText()+"',"
                + "cli_calle = "+field_calle.getText()+","
                + "cli_sit_frente_iva = "+field_sit_frente_iva.getText()+" "
                + "WHERE cli_codigo = "+field_codigo.getText());
        
        r_con.cierraConexion();
        }catch(Exception e)
            {System.out.println(e.getMessage());}
    }
    
    private void modoConsulta (){
        lab_modo.setText("Consulta");
        btn_aceptar.setEnabled(false);
        btn_cancelar.setEnabled(false);
        camposEditables(false); 
        ayudaDisponible(true);
    }
    
    
    private void camposEditables (boolean condicion){
        field_codigo.setEditable(condicion);
        field_nombre.setEditable(condicion);
        field_apellido.setEditable(condicion);
        field_localidad.setEditable(condicion);
        field_direccion.setEditable(condicion);
        field_fecha_nac.setEditable(condicion);
        field_calle.setEditable(condicion);
        field_cuit1.setEditable(condicion);
        field_cuit2.setEditable(condicion);
        field_cuit3.setEditable(condicion);
        field_sit_frente_iva.setEditable(condicion);
        
    }
    
    private void ayudaDisponible(boolean condicion){
        btn_primero.setEnabled(condicion);
        btn_anterior.setEnabled(condicion);
        btn_proximo.setEnabled(condicion);
        btn_ultimo.setEnabled(condicion);
        field_buscar.setEnabled(condicion);
        btn_buscar.setEnabled(condicion);

        tabla.setVisible(condicion);
    }
    
    private void vaciarCampos(){        
        field_codigo.setText("");
        field_nombre.setText("");
        field_apellido.setText("");
        field_fecha_nac.setText("");
        field_cuit1.setText("");
        field_cuit2.setText("");
        field_cuit3.setText("");
        field_localidad.setText("");
        lab_localidad.setText("");
        field_direccion.setText("");
        field_calle.setText("");
        field_sit_frente_iva.setText("");
        lab_tipo_imp.setText("");
        
    }
    
    private boolean camposCompletos (){
        if((!field_codigo.getText().equals(""))&&
           (!field_nombre.getText().equals(""))&&
           (!field_apellido.getText().equals(""))&&
           (!field_localidad.getText().equals(""))&&
           (!field_direccion.getText().equals(""))&&
           (!field_sit_frente_iva.getText().equals(""))){
           return true;
        }
        else{
            return false;
        }
    }
    
    private void menuDisponible (boolean disponible){
        menu_alta.setEnabled(disponible);
        menu_baja.setEnabled(disponible);
        menu_mod.setEnabled(disponible);
        menu_recorrido.setEnabled(disponible);
        menu_salir.setEnabled(disponible);
    }
    
    private void ocultar_Msj(){
        this.lab_mensaje.setText(" ");
    }
    
    private void mostrar_Msj_Exito(String texto) {
        this.lab_mensaje.setText(texto);
        this.lab_mensaje.setForeground(new java.awt.Color(0, 153, 51));
    }
    
    private void mostrar_Msj_Error(String texto) {
        this.lab_mensaje.setText(texto);
        this.lab_mensaje.setForeground(Color.RED);
    }   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_anterior;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_primero;
    private javax.swing.JButton btn_proximo;
    private javax.swing.JButton btn_ultimo;
    private javax.swing.JTextField field_apellido;
    private javax.swing.JTextField field_buscar;
    private javax.swing.JTextField field_calle;
    private javax.swing.JTextField field_codigo;
    private javax.swing.JTextField field_cuit1;
    private javax.swing.JTextField field_cuit2;
    private javax.swing.JTextField field_cuit3;
    private javax.swing.JTextField field_direccion;
    private javax.swing.JFormattedTextField field_fecha_nac;
    private javax.swing.JTextField field_localidad;
    private javax.swing.JTextField field_nombre;
    private javax.swing.JTextField field_sit_frente_iva;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lab_buscar;
    private javax.swing.JLabel lab_cantidad;
    private javax.swing.JLabel lab_cantidad1;
    private javax.swing.JLabel lab_cantidad2;
    private javax.swing.JLabel lab_codigo;
    private javax.swing.JLabel lab_cu;
    private javax.swing.JLabel lab_descripcion;
    private javax.swing.JLabel lab_localidad;
    private javax.swing.JLabel lab_mensaje;
    private javax.swing.JLabel lab_modo;
    private javax.swing.JLabel lab_neto;
    private javax.swing.JLabel lab_neto1;
    private javax.swing.JLabel lab_orden;
    private javax.swing.JLabel lab_tasa;
    private javax.swing.JLabel lab_tipo_imp;
    private javax.swing.JLabel lab_tit_modo;
    private javax.swing.JLabel lab_tit_orden;
    private javax.swing.JMenu menu_alta;
    private javax.swing.JMenu menu_baja;
    private javax.swing.JMenuBar menu_interno;
    private javax.swing.JMenu menu_listar;
    private javax.swing.JMenu menu_mod;
    private javax.swing.JMenu menu_recorrido;
    private javax.swing.JMenu menu_salir;
    private javax.swing.JPanel panel_ayuda;
    private javax.swing.JPanel panel_datos;
    private javax.swing.JPanel panel_desplazamiento;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

     private void ordenarFoco() {        
        field_codigo.setNextFocusableComponent(field_nombre);
        field_nombre.setNextFocusableComponent(field_apellido);
        field_apellido.setNextFocusableComponent(field_fecha_nac);
        field_fecha_nac.setNextFocusableComponent(field_cuit1);
        field_cuit1.setNextFocusableComponent(field_cuit2);
        field_cuit2.setNextFocusableComponent(field_cuit3);
        field_cuit3.setNextFocusableComponent(field_localidad);
        field_localidad.setNextFocusableComponent(field_direccion);
        field_direccion.setNextFocusableComponent(field_calle);
        field_calle.setNextFocusableComponent(field_sit_frente_iva);
        field_sit_frente_iva.setNextFocusableComponent(btn_aceptar);
        btn_aceptar.setNextFocusableComponent(btn_cancelar);
        
    }
    
    /*
    * metodo para controlar que el evento Key Typed sea solo numero
    */
    public void onlyNum(KeyEvent ke) {         
        char caracter = ke.getKeyChar();
        if(((caracter < '0') || (caracter > '9'))){
            ke.consume(); 
        } 
    } 

    public String getName_tabla() {
        return name_tabla;
    }
}

