/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Facturacion;


import Clases_Auxiliares.Conexion;
import Clases_Auxiliares.Validaciones;
import Clases_Auxiliares.Fechas;
import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenuItem;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manolo
 */
public class IGUI_Listado_Productos extends javax.swing.JInternalFrame {

    //variables de referencias a librerias Auxiliares
    private Conexion r_con = new Conexion(); 
    private final Validaciones validar = new Validaciones();
    private final Fechas fecha = new Fechas ();
    
    /*
    * PARA QUE FUNCIONE CORRECTAMENTE ESTE LISTADO DEBE PRESTAR TOTAL ATENCION A LAS VARIABLES
    * SOLICITADAS A CONTINUACION:
    */
    
    //nombre de la Tabla del SGBD
    private String name_tabla = "productos";
    //nombre de las columnas de la Tabla del SGBD (los que desee mostrar)
    private String[] colum_names = {"prod_codigo","prod_descripcion","prod_cantidad","prod_costo","prod_precio_neto_venta","prod_tasa_iva","prod_impuesto_porcentaje","prod_impuesto_valor"};
    //nombres reales de los Indices de la Tabla del SGBD
    private String[] indices_tabla = {"PK_Producto_Codigo","PK_Producto_Cantidad","PK_Producto_Costo","PK_Producto_Tasa"};  
    
    //nombres de los campos de la JTabla (formales a mostrar, misma cantidad que los de ls Tabla) 
    private String[] colum_names_tabla = {"Codigo Producto","Descripcion","Cantidad","Costo","Precio Neto Venta","Tasa IVA","Impuesto %","Impuesto F."};    
    
    //nombres formales de los Indices de la Tabla (a mostrar en el menu ordenamiento, misma cantidad que Indices)
    private String[] name_indicesTabla = {"por Codigo de Producto","por Cantidad","por Costo","por Tasa de IVA"};
    //posicion que ocupa el valor indices_tabla en colum_names_tabla (para saber que Buscar)
    private int[] relacion_indices_conTabla = {0,2,3,5};
    
    //modo ordenamiento (Indice) elegido inicial por defecto (cambiar manualmente)
    private int numero_ordenamiento_elegido = 0; //(corresponde al numero de indices_tabla)
    private String modo_ordenamiento_elegido = indices_tabla[numero_ordenamiento_elegido];
    
    //fila actual posicionado en la tabla
    private int fila_ultimo_registro; 
    
    
    public IGUI_Listado_Productos(Conexion r) {
        initComponents();
        //ajusto el tamaño del listado
        r_con = r;
        float escalar = 0.80F;
        int ancho = (int)(Toolkit.getDefaultToolkit().getScreenSize(). width*escalar);
        int alto = (int)(Toolkit.getDefaultToolkit().getScreenSize(). height*escalar);   
        this.setSize(ancho,alto);

        //cargo los ordenamientos
        cargarOrdenamientos ();
        detectarOrden ();
        
        ocultar_Msj();
        rango_1.setEnabled(false);
        rango_2.setEnabled(false);
        btn_filtro.setEnabled(false);
        
        //selecciono el primer registro y cargo los campos
        if (tabla.getRowCount()>0){
            tabla.setRowSelectionInterval(0,0); 
        }        
        this.requestFocusInWindow();
    }
    
    public IGUI_Listado_Productos(){}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_ayuda = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        lab_mensaje = new javax.swing.JLabel();
        panel_opciones = new javax.swing.JPanel();
        lab_tit_orden1 = new javax.swing.JLabel();
        lab_orden = new javax.swing.JLabel();
        lab_tit_filtros = new javax.swing.JLabel();
        combo_filtro = new javax.swing.JComboBox();
        rango_1 = new javax.swing.JTextField();
        rango_2 = new javax.swing.JTextField();
        btn_filtro = new javax.swing.JButton();
        lab_buscar = new javax.swing.JLabel();
        field_buscar = new javax.swing.JTextField();
        btn_buscar = new javax.swing.JButton();
        lab_desplazamiento = new javax.swing.JLabel();
        btn_anterior = new javax.swing.JButton();
        btn_proximo = new javax.swing.JButton();
        btn_primero = new javax.swing.JButton();
        btn_ultimo = new javax.swing.JButton();
        menu_interno = new javax.swing.JMenuBar();
        menu_recorrido = new javax.swing.JMenu();
        menu_salir = new javax.swing.JMenu();

        setMaximizable(true);
        setTitle("Listado Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cuentas.png"))); // NOI18N

        panel_ayuda.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_ayuda.setFocusable(false);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        lab_mensaje.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_mensaje.setForeground(java.awt.Color.red);
        lab_mensaje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab_mensaje.setText("mensaje");

        javax.swing.GroupLayout panel_ayudaLayout = new javax.swing.GroupLayout(panel_ayuda);
        panel_ayuda.setLayout(panel_ayudaLayout);
        panel_ayudaLayout.setHorizontalGroup(
            panel_ayudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_ayudaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_ayudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_mensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_ayudaLayout.setVerticalGroup(
            panel_ayudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_ayudaLayout.createSequentialGroup()
                .addComponent(lab_mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        panel_opciones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_opciones.setFocusCycleRoot(true);

        lab_tit_orden1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_tit_orden1.setForeground(new java.awt.Color(51, 153, 0));
        lab_tit_orden1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab_tit_orden1.setText("ORDEN de RECORRIDO:");

        lab_orden.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_orden.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab_orden.setText("Tipo");

        lab_tit_filtros.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_tit_filtros.setText(" Filtros:");

        combo_filtro.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        combo_filtro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Rango", "Único Valor" }));
        combo_filtro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_filtroItemStateChanged(evt);
            }
        });

        btn_filtro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/aceptar.png"))); // NOI18N
        btn_filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_filtroActionPerformed(evt);
            }
        });

        lab_buscar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_buscar.setText(" Buscar:");

        field_buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                field_buscarKeyPressed(evt);
            }
        });

        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/buscar.png"))); // NOI18N
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        lab_desplazamiento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab_desplazamiento.setText(" Deplazamiento:");

        btn_anterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-left-2x.png"))); // NOI18N
        btn_anterior.setText("Anterior");
        btn_anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_anteriorActionPerformed(evt);
            }
        });

        btn_proximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-right-2x.png"))); // NOI18N
        btn_proximo.setText("Próximo");
        btn_proximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_proximoActionPerformed(evt);
            }
        });

        btn_primero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-circle-left-2x.png"))); // NOI18N
        btn_primero.setText("Primero");
        btn_primero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_primeroActionPerformed(evt);
            }
        });

        btn_ultimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow-circle-right-2x.png"))); // NOI18N
        btn_ultimo.setText("Último");
        btn_ultimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ultimoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_opcionesLayout = new javax.swing.GroupLayout(panel_opciones);
        panel_opciones.setLayout(panel_opcionesLayout);
        panel_opcionesLayout.setHorizontalGroup(
            panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lab_tit_orden1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lab_orden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lab_tit_filtros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lab_buscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lab_desplazamiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panel_opcionesLayout.createSequentialGroup()
                .addGroup(panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_anterior)
                    .addComponent(btn_primero))
                .addGap(18, 18, 18)
                .addGroup(panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_proximo)
                    .addComponent(btn_ultimo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panel_opcionesLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_filtro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(field_buscar))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_opcionesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rango_1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rango_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
            .addGroup(panel_opcionesLayout.createSequentialGroup()
                .addGroup(panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_opcionesLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(btn_filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_opcionesLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(btn_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_opcionesLayout.setVerticalGroup(
            panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_opcionesLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lab_tit_orden1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lab_orden)
                .addGap(18, 18, 18)
                .addComponent(lab_tit_filtros)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rango_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rango_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_filtro)
                .addGap(18, 18, 18)
                .addComponent(lab_buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(field_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_buscar)
                .addGap(18, 18, 18)
                .addComponent(lab_desplazamiento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_anterior)
                    .addComponent(btn_proximo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_primero)
                    .addComponent(btn_ultimo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu_interno.setBorderPainted(false);

        menu_recorrido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/magnifying-glass-4x.png"))); // NOI18N
        menu_recorrido.setText(" ORDEN RECORRIDO ");
        menu_interno.add(menu_recorrido);

        menu_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/circle-x-4x.png"))); // NOI18N
        menu_salir.setText("SALIR           ");
        menu_salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_salirMouseClicked(evt);
            }
        });
        menu_interno.add(menu_salir);

        setJMenuBar(menu_interno);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel_opciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_ayuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_opciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_ayuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        scrollCellToView(this.tabla,tabla.getSelectedRow(),1);        
    }//GEN-LAST:event_tablaMouseClicked
    
    private void btn_primeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_primeroActionPerformed
        if (tabla.getRowCount()>0){
            scrollToCenter(this.tabla,0,0);
            tabla.setRowSelectionInterval(0,0);
            fila_ultimo_registro=0;
        }
    }//GEN-LAST:event_btn_primeroActionPerformed

    private void btn_ultimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ultimoActionPerformed
        if (tabla.getRowCount()>0){
            scrollToCenter(this.tabla,tabla.getRowCount(),tabla.getRowCount());
            tabla.setRowSelectionInterval(tabla.getRowCount()-1,tabla.getRowCount()-1);
            fila_ultimo_registro=tabla.getRowCount()-1;
        }
    }//GEN-LAST:event_btn_ultimoActionPerformed

    private void menu_salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_salirMouseClicked
        this.dispose();
    }//GEN-LAST:event_menu_salirMouseClicked

    private void btn_anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_anteriorActionPerformed
        if ((fila_ultimo_registro-1 >= 0)&&(fila_ultimo_registro-1 < tabla.getRowCount())){             
            tabla.setRowSelectionInterval(fila_ultimo_registro-1,fila_ultimo_registro-1);
            scrollCellToView(this.tabla,fila_ultimo_registro-1,fila_ultimo_registro-1);
            fila_ultimo_registro=fila_ultimo_registro-1;
        }
    }//GEN-LAST:event_btn_anteriorActionPerformed

    private void btn_proximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_proximoActionPerformed
        if ((fila_ultimo_registro+1 >= 0)&&(fila_ultimo_registro+1 < tabla.getRowCount())){                      
            tabla.setRowSelectionInterval(fila_ultimo_registro+1,fila_ultimo_registro+1); 
            scrollCellToView(this.tabla,fila_ultimo_registro+1,fila_ultimo_registro+1); 
            fila_ultimo_registro=fila_ultimo_registro+1;
        }
    }//GEN-LAST:event_btn_proximoActionPerformed

    public int buscarValor (String valor){
        if (tabla.getRowCount()>0){
            return busquedaBinaria(valor.toUpperCase(),0,tabla.getRowCount()-1,relacion_indices_conTabla[numero_ordenamiento_elegido]); 
        }
        else{
            return -1;
        }
    } 

    private int busquedaBinaria(String elemento, int ini, int fin, int nro_campo_tabla){
        int posicion;
        int M = (int)(ini+fin)/2;

        //CB1
        if (elemento.equals((tabla.getValueAt(M,nro_campo_tabla).toString()).toUpperCase())){
                posicion = M;
            }              
        else{
            //CB2
                if (ini >= fin){
                    posicion = -1;
                }  
            //CG
            else{
                if (compare(((tabla.getValueAt(M,nro_campo_tabla)).toString().toUpperCase()),elemento) < 0){
                    ini = M+1;
                    posicion = busquedaBinaria (elemento,ini,fin,nro_campo_tabla);
                }
                else{
                    fin = M-1;
                    posicion = busquedaBinaria (elemento,ini,fin,nro_campo_tabla);
                }            
            }
        }
        return(posicion);
    }
    
//*******************************************************************************************************
//Este algoritmo reemplaza al compareTo de Java, ya que mejora problemas como por ejemplo comparar
// cadenas y numeros, dado que 2.compareTo(10) devolvia 1, siendo que no es asi.
    private final boolean isDigit(char ch)
    {
        return ch >= 48 && ch <= 57;
    }

    /** Length of string is passed in for improved efficiency (only need to calculate it once) **/
    private final String getChunk(String s, int slength, int marker)
    {
        StringBuilder chunk = new StringBuilder();
        char c = s.charAt(marker);
        chunk.append(c);
        marker++;
        if (isDigit(c))
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (!isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        } else
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        }
        return chunk.toString();
    }

    public int compare(String o1, String o2)
    {
        String s1 = (String)o1;
        String s2 = (String)o2;

        int thisMarker = 0;
        int thatMarker = 0;
        int s1Length = s1.length();
        int s2Length = s2.length();

        while (thisMarker < s1Length && thatMarker < s2Length)
        {
            String thisChunk = getChunk(s1, s1Length, thisMarker);
            thisMarker += thisChunk.length();

            String thatChunk = getChunk(s2, s2Length, thatMarker);
            thatMarker += thatChunk.length();

            // If both chunks contain numeric characters, sort them numerically
            int result = 0;
            if (isDigit(thisChunk.charAt(0)) && isDigit(thatChunk.charAt(0)))
            {
                // Simple chunk comparison by length.
                int thisChunkLength = thisChunk.length();
                result = thisChunkLength - thatChunk.length();
                // If equal, the first different number counts
                if (result == 0)
                {
                    for (int i = 0; i < thisChunkLength; i++)
                    {
                        result = thisChunk.charAt(i) - thatChunk.charAt(i);
                        if (result != 0)
                        {
                            return result;
                        }
                    }
                }
            } else
            {
                result = thisChunk.compareTo(thatChunk);
            }

            if (result != 0)
                return result;
        }
        return s1Length - s2Length;
    }
//*******************************************************************************************************
    
    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        accion_Buscar();
    }//GEN-LAST:event_btn_buscarActionPerformed
    
    private void accion_Buscar(){
        int rta = buscarValor(field_buscar.getText());
        if (rta >= 0){
            posicionarAyuda(field_buscar.getText());
            ocultar_Msj();
            scrollCellToView(this.tabla,rta,1);
            //tabla.setRowSelectionInterval(rta, rta);
        }
        else{
            field_buscar.requestFocus();
            String campobuscado = colum_names_tabla[relacion_indices_conTabla[numero_ordenamiento_elegido]];
            mostrar_Msj_Error("No se encontro '"+campobuscado+"' para el valor : "+field_buscar.getText());
        }  
    }
    
    private void field_buscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_buscarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            accion_Buscar();            
        }
    }//GEN-LAST:event_field_buscarKeyPressed

    private void btn_filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_filtroActionPerformed
        updateTabla();
    }//GEN-LAST:event_btn_filtroActionPerformed

    private void combo_filtroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_filtroItemStateChanged
        //todos
        if (combo_filtro.getSelectedIndex()==0){
            rango_1.setEnabled(false);
            rango_2.setEnabled(false);
            rango_1.setText("");
            rango_2.setText("");
            btn_filtro.setEnabled(false);
            updateTabla();
        }
        else{
            //rango
            if (combo_filtro.getSelectedIndex()==1){
                rango_1.setEnabled(true);
                rango_2.setEnabled(true);
                btn_filtro.setEnabled(true);
                rango_1.requestFocusInWindow();
            }
            else{
                //solo 1
                rango_1.setEnabled(true);
                rango_2.setEnabled(false);
                rango_2.setText("");
                btn_filtro.setEnabled(true);
                rango_1.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_combo_filtroItemStateChanged
    
    /*
    * carga los Indices de la Tabla del SGBD al menu de Recorridos para poder ser usados
    */
    private void cargarOrdenamientos () {         
        ButtonGroup grupo_recorridos;
        grupo_recorridos = new javax.swing.ButtonGroup();
        for (int i = 0; i < indices_tabla.length; i++) {            
            JCheckBoxMenuItem item = new javax.swing.JCheckBoxMenuItem(name_indicesTabla[i],new javax.swing.ImageIcon(getClass().getResource("/Iconos/item.png")));
            item.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    detectarOrden ();
                }
            });
            grupo_recorridos.add(item);
            menu_recorrido.add(item);
            if (i==numero_ordenamiento_elegido){
                item.setSelected(true);
            }
        } 
    }
    
    /**
     * el metodo detecta que orden fue seleccionado entre los valores de "orden de recorrido"
     */
    private void detectarOrden (){        
        int i = 0;
        boolean detecte = false;
        
        while ((!detecte)&&(i < this.menu_recorrido.getItemCount())) {            
            if(this.menu_recorrido.getItem(i).isSelected()){
                JMenuItem item = menu_recorrido.getItem(i);
                numero_ordenamiento_elegido = i;
                modo_ordenamiento_elegido = item.getText();
                lab_orden.setText(menu_recorrido.getItem(i).getText());
            }
            i++;
        }
        //** cambiado el orden, actualizo los valores de la tabla respecto al orden
        updateTabla();
    }    
    
    /**
     * realiza una consulta a la tabla Cuentas de la BD y la vuelca a la jTable
     */
    private void updateTabla(){ 
                      
        //** pido los datos a la tabla  
        Object[][] vcta = this.getDatos();
               
        //** se colocan los datos en la tabla
        DefaultTableModel datos = new DefaultTableModel();                        
        tabla.setModel(datos);         
        datos = new DefaultTableModel(vcta,colum_names_tabla);                        
        tabla.setModel(datos); 
        
        //ajustamos tamaño de la celda Fecha Alta
        /*TableColumn columna = tabla.getColumn("Fecha Alta");        
        columna.setPreferredWidth(100);
        columna.setMinWidth(100);
        columna.setMaxWidth(100);*/
        
        //posiciono en el buscado, por si cambia el orden de recorrido
        if (!field_buscar.getText().equals("")){
            posicionarAyuda(field_buscar.getText());
        }
        else{
            if ((fila_ultimo_registro-1 >= 0)&&(fila_ultimo_registro-1 < tabla.getRowCount())){             
                tabla.setRowSelectionInterval(fila_ultimo_registro-1,fila_ultimo_registro-1);
                scrollCellToView(this.tabla,fila_ultimo_registro-1,fila_ultimo_registro-1); 
            }
            else{
                 if ((fila_ultimo_registro+1 >= 0)&&(fila_ultimo_registro+1 <= tabla.getRowCount())){                      
                    tabla.setRowSelectionInterval(fila_ultimo_registro,fila_ultimo_registro); 
                    scrollCellToView(this.tabla,fila_ultimo_registro,fila_ultimo_registro);  
                }
            }
        }
    }
    
    /**
     * posiciona la ayuda, cargando los datos de la cuenta al panel de datos y centrando la tabla
     * al valor selecionado 
     * @param valor numero de la registro seleccionado
     */
    private void posicionarAyuda(String valor) {
        int posicion = buscarValor(valor);      
        if (posicion>=0){
            //cargar_ValoresPorFila(posicion);
            ocultar_Msj();
            scrollCellToView(this.tabla,posicion,1);
            tabla.setRowSelectionInterval(posicion,posicion);
        }
    }
    
    /**
     * metodo que maneja el modelo de una jTable para centrar el scroll al medio
     * @param table la jTable a centrar
     * @param rowIndex numero de la fila a centrar al medio
     * @param vColIndex valor por defecto = 1, es para obtener el Rectangle de la jTable
     */
    private static void scrollToCenter(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
          return;
        }
        JViewport viewport = (JViewport) table.getParent();
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);
        Rectangle viewRect = viewport.getViewRect();
        rect.setLocation(rect.x - viewRect.x, rect.y - viewRect.y);

        int centerX = (viewRect.width - rect.width); // / 2;
        int centerY = (viewRect.height - rect.height); // / 2;
        if (rect.x < centerX) {
          centerX = -centerX;
        }
        if (rect.y < centerY) {
          centerY = -centerY;
        }
        rect.translate(centerX, centerY);
        viewport.scrollRectToVisible(rect);
    }
    
    /**
     * metodo que maneja el modelo de una jTable para que sea visible al usuario
     * @param table la jTable a hacer visivle
     * @param rowIndex numero de la fila actual
     * @param vColIndex valor por defecto = 1, es para obtener el Rectangle de la jTable
     */
    public void scrollCellToView(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
            return;
        }
        JViewport viewport = (JViewport) table.getParent();
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);
        Rectangle viewRect = viewport.getViewRect();

        int x = viewRect.x;
        int y = viewRect.y;

        if (rect.x >= viewRect.x && rect.x <= (viewRect.x + viewRect.width - rect.width)){

        } else if (rect.x < viewRect.x){
            x = rect.x;
        } else if (rect.x > (viewRect.x + viewRect.width - rect.width)) {
            x = rect.x - viewRect.width + rect.width;
        }

        if (rect.y >= viewRect.y && rect.y <= (viewRect.y + viewRect.height - rect.height)){

        } else if (rect.y < viewRect.y){
            y = rect.y;
        } else if (rect.y > (viewRect.y + viewRect.height - rect.height)){
            y = rect.y - viewRect.height + rect.height;
        }

        viewport.setViewPosition(new Point(x,y));
    }
    
    /**
     * devuelve la cantidad actual de cuentas en la Base de Datos
     * @return valor entero de la cantidad de cuentas
     */
    private int getCantidad_Cuentas (){
        int registros = 0;
        //obtenemos la cantidad de registros existentes en la tabla
        try{         
           r_con.Connection();           
           PreparedStatement pstm = r_con.getConn().prepareStatement("SELECT count(1) as total FROM "+name_tabla);
           ResultSet res = pstm.executeQuery();
           res.next();
           registros = res.getInt("total");
           res.close();
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }
        
        return registros;
    }
    
    /**
     * obtiene todos los datos de la tabla y los carga a una matriz de objetos
     * @return retorna una matriz de objetos, cuya finalidad es setearla directamente
     *         al modelo de la jTable
     */
    public Object [][] getDatos(){                 
        Object[][] data = new String[getCantidad_Cuentas ()][colum_names.length];  
        //realizamos la consulta sql y llenamos los datos en "Object"
        try{    
            if (colum_names.length>=0){
                r_con.Connection();
                String campos = colum_names[0];
                
                for (int i = 1; i < colum_names.length; i++) {
                    campos+=",";
                    campos+=colum_names[i];
                }
                
                String consulta = null;
                
                if (combo_filtro.getSelectedIndex()==0){
                    consulta = ("SELECT "+campos+" "+
                                "FROM "+name_tabla+" WITH (INDEX("+indices_tabla[numero_ordenamiento_elegido]+"))");
                    ocultar_Msj();
                }
                else{
                    if (combo_filtro.getSelectedIndex()==1){
                        String campobuscado = colum_names[relacion_indices_conTabla[numero_ordenamiento_elegido]];
                        consulta = ("SELECT "+campos+" "+
                                    "FROM "+name_tabla+" WITH (INDEX("+indices_tabla[numero_ordenamiento_elegido]+")) "+
                                    "WHERE ("+campobuscado+" >= '"+rango_1.getText()+"' AND "+campobuscado+" <= '"+rango_2.getText()+"')");
                        String buscado = colum_names_tabla[relacion_indices_conTabla[numero_ordenamiento_elegido]];
                        mostrar_Msj_Exito("FILTRO: "+buscado+" entre: "+rango_1.getText()+" y "+rango_2.getText());
                    }
                    else{
                        String campobuscado = colum_names[relacion_indices_conTabla[numero_ordenamiento_elegido]];
                        consulta = ("SELECT "+campos+" "+
                                    "FROM "+name_tabla+" WITH (INDEX("+indices_tabla[numero_ordenamiento_elegido]+")) "+
                                    "WHERE ("+campobuscado+" = '"+rango_1.getText()+"')");
                        String buscado = colum_names_tabla[relacion_indices_conTabla[numero_ordenamiento_elegido]];
                        mostrar_Msj_Exito("FILTRO: "+buscado+" = "+rango_1.getText());
                    }
                }

                if (consulta!=null){
                    PreparedStatement pstm = r_con.getConn().prepareStatement(consulta);
                    ResultSet res = pstm.executeQuery();
                    int i = 0;
                    while(res.next()){
                        for (int j = 0; j < colum_names.length; j++) {  
                            data[i][j] = res.getString(j+1);
                        }     
                        i++;
                    }
                    res.close();
                }
            }
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }
        return data;
    }

    
    private void ayudaDisponible(boolean condicion){
        btn_primero.setEnabled(condicion);
        btn_anterior.setEnabled(condicion);
        btn_proximo.setEnabled(condicion);
        btn_ultimo.setEnabled(condicion);
        field_buscar.setEnabled(condicion);
        btn_buscar.setEnabled(condicion);
        tabla.setVisible(condicion);
    }
    
    private void ocultar_Msj(){
        this.lab_mensaje.setText(" ");
    }
    
    private void mostrar_Msj_Exito(String texto) {
        this.lab_mensaje.setText(texto);
        this.lab_mensaje.setForeground(new java.awt.Color(0, 153, 51));
    }
    
    private void mostrar_Msj_Error(String texto) {
        this.lab_mensaje.setText(texto);
        this.lab_mensaje.setForeground(Color.RED);
    }   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_anterior;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_filtro;
    private javax.swing.JButton btn_primero;
    private javax.swing.JButton btn_proximo;
    private javax.swing.JButton btn_ultimo;
    private javax.swing.JComboBox combo_filtro;
    private javax.swing.JTextField field_buscar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lab_buscar;
    private javax.swing.JLabel lab_desplazamiento;
    private javax.swing.JLabel lab_mensaje;
    private javax.swing.JLabel lab_orden;
    private javax.swing.JLabel lab_tit_filtros;
    private javax.swing.JLabel lab_tit_orden1;
    private javax.swing.JMenuBar menu_interno;
    private javax.swing.JMenu menu_recorrido;
    private javax.swing.JMenu menu_salir;
    private javax.swing.JPanel panel_ayuda;
    private javax.swing.JPanel panel_opciones;
    private javax.swing.JTextField rango_1;
    private javax.swing.JTextField rango_2;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    
    /*
    * metodo para controlar que el evento Key Typed sea solo numero
    */
    public void onlyNum(KeyEvent ke) {         
        char caracter = ke.getKeyChar();
        if(((caracter < '0') || (caracter > '9'))){
            ke.consume(); 
        } 
    }

    public String getName_tabla() {
        return name_tabla;
    }
}

