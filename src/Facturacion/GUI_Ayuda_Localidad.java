/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Facturacion;

import Contabilidad.*;
import Interface.*;
import Clases_Auxiliares.Conexion;
import java.awt.AWTException;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;


/**
 *
 * @author Manolo
 */
public class GUI_Ayuda_Localidad extends javax.swing.JInternalFrame {
    
//***********************************************************************************************************************************************************************************   
    //nombre de la Tabla del SGBD
    private final String name_tabla = "localidades";
    //nombre de las columnas de la Tabla a mostrar en la Ayuda
    private final String[] colum_names = {"loc_id","loc_codigo_postal","loc_descripcion"};
    //nombres reales de los Indices de la Tabla
    private final String[] indices_tabla = {"PK_codigo_postal","PK_loc_descripcion"}; 
    //modo ordenamiento elegido inicial por defecto (cambiar manualmente)
    private final int numero_ordenamiento_elegido = 0; //(corresponde al numero de indices_tabla)
//***********************************************************************************************************************************************************************************
    
//***********************************************************************************************************************************************************************************
    //nombres de los campos de la JTabla (formales a mostrar en la ayuda) 
    private final String[] colum_names_tabla = {"ID","Codigo Postal","DescripciÃ³n"};        
    //nombre del modo de ordenamiento elegido inicial
    private final String modo_ordenamiento_elegido = indices_tabla[numero_ordenamiento_elegido];
//***********************************************************************************************************************************************************************************
    
    private final Conexion r_con;
    private final JInternalFrame ventana;
    private String id_ayuda;
   
    public GUI_Ayuda_Localidad(Conexion con,JInternalFrame v) {
        initComponents();        
        r_con=con;              
        //internal frame que solicito la ayuda
        ventana = v;
        updateTabla();
        //**selecciono el primer registro y cargo los campos
        if (tabla.getRowCount()>0){
            cargar_Seleccionado(0);
            tabla.setRowSelectionInterval(0,0);
            tabla.requestFocus();
            //unica manera de que la columna gane el foco y se pueda desplazar con las flechas
            try {
                Robot robot = new Robot();
                robot.keyPress(KeyEvent.VK_TAB);            
            } catch (AWTException ex) {}
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        lab_elegido = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(new javax.swing.border.SoftBevelBorder(0));
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ayuda Localidades");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/articulo.png"))); // NOI18N
        setInheritsPopupMenu(true);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        tabla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/aceptar.png"))); // NOI18N
        jButton2.setText("Aceptar");
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cancelar.png"))); // NOI18N
        jButton1.setText("Cancelar");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lab_elegido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lab_elegido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab_elegido.setText("-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lab_elegido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(37, 37, 37))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(lab_elegido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

            
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        r_con.cierraConexion();
        try {        
            ventana.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(GUI_Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        ventana.moveToFront();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        confirmar_Ayuda();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void confirmar_Ayuda(){
        this.dispose();
        r_con.cierraConexion();        
        try {
            ventana.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(GUI_Ayuda_PC.class.getName()).log(Level.SEVERE, null, ex);
        }        
        ventana.moveToFront();
        
        //al traer el internalFrame al frente vuelve a tomar el foco el TextField que solicito la ayuda
        //obviamente el foco debe de quedar en el componente que trajo el problema y no en el siguiente
        Component quienpidioayuda = ventana.getFocusOwner();
        if (quienpidioayuda instanceof JTextField){
            ((JTextField)quienpidioayuda).setText(id_ayuda);
            quienpidioayuda.nextFocus();
        }
    }
    
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        cargar_Seleccionado (tabla.rowAtPoint(evt.getPoint()));
    }//GEN-LAST:event_tablaMouseClicked

    private void tablaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){    
            confirmar_Ayuda();
        }
    }//GEN-LAST:event_tablaKeyPressed

    private void tablaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaKeyReleased
        // TODO add your handling code here:
         if ((evt.getKeyCode() == KeyEvent.VK_UP) || (evt.getKeyCode() == KeyEvent.VK_DOWN)){           
 
            cargar_Seleccionado((tabla.getSelectedRow()));            
        }
    }//GEN-LAST:event_tablaKeyReleased
    
    /**
     * metodo que maneja el modelo de una jTable para que sea visible al usuario
     * @param table la jTable a hacer visivle
     * @param rowIndex numero de la fila actual
     * @param vColIndex valor por defecto = 1, es para obtener el Rectangle de la jTable
     */
    public void scrollCellToView(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
            return;
        }
        JViewport viewport = (JViewport) table.getParent();
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);
        Rectangle viewRect = viewport.getViewRect();

        int x = viewRect.x;
        int y = viewRect.y;

        if (rect.x >= viewRect.x && rect.x <= (viewRect.x + viewRect.width - rect.width)){

        } else if (rect.x < viewRect.x){
            x = rect.x;
        } else if (rect.x > (viewRect.x + viewRect.width - rect.width)) {
            x = rect.x - viewRect.width + rect.width;
        }

        if (rect.y >= viewRect.y && rect.y <= (viewRect.y + viewRect.height - rect.height)){

        } else if (rect.y < viewRect.y){
            y = rect.y;
        } else if (rect.y > (viewRect.y + viewRect.height - rect.height)){
            y = rect.y - viewRect.height + rect.height;
        }
        viewport.setViewPosition(new Point(x,y));
    }
    
    private void cargar_Seleccionado (int elegido){
       if ((elegido >= 0)&&(elegido < tabla.getRowCount())){
           id_ayuda=String.valueOf(tabla.getValueAt(elegido, 1));
           String elemento = String.valueOf(tabla.getValueAt(elegido, 1));
           lab_elegido.setText(elemento);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lab_elegido;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables


private void updateTabla(){                      
        //** pido los datos a mostrar en la tabla  
        Object[][] vdat = this.getDatos();               
        //** se colocan los datos en la tabla
        //DefaultTableModel datos = new DefaultTableModel();
        
        DefaultTableModel datos = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        datos.setDataVector(vdat, colum_names_tabla);                       
        tabla.setModel(datos);
        
        //ancho primera columna
        TableColumn columna1 = tabla.getColumn(this.colum_names_tabla[0]);        
        columna1.setPreferredWidth(100);
        columna1.setMinWidth(100);
        columna1.setMaxWidth(100);
}

    public Object [][] getDatos(){                 
        Object[][] data = new String[getCantidadElementos()][colum_names.length];  
        //realizamos la consulta sql y llenamos los datos en "Object"
        try{    
            if (colum_names.length>=0){
                r_con.Connection();

                String campos = colum_names[0];
                for (int i = 1; i < colum_names.length; i++) {
                    campos+=",";
                    campos+=colum_names[i];
                }

                String consulta = ("SELECT "+campos+" "+
                                   "FROM "+name_tabla+" WITH (INDEX("+indices_tabla[numero_ordenamiento_elegido]+"))");

                PreparedStatement pstm = r_con.getConn().prepareStatement(consulta);

                ResultSet res = pstm.executeQuery();
                int i = 0;
                while(res.next()){
                    for (int j = 0; j < colum_names.length; j++) {  
                        data[i][j] = res.getString(j+1);
                    }     
                    i++;
                }
                res.close();
            }
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }
        return data;
    }

     private int getCantidadElementos (){
        int registros = 0;
        //obtenemos la cantidad de registros existentes en la tabla
        try{         
           r_con.Connection();           
           PreparedStatement pstm = r_con.getConn().prepareStatement("SELECT count(1) as total FROM "+name_tabla);
           ResultSet res = pstm.executeQuery();
           res.next();
           registros = res.getInt("total");
           res.close();
        } catch(SQLException e){
            System.out.println(e);
        } finally {            
            r_con.cierraConexion();
        }        
        return registros;
    }


}
